<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leejunhui&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leejunhui.com/"/>
  <updated>2020-01-05T18:35:23.497Z</updated>
  <id>http://leejunhui.com/</id>
  
  <author>
    <name>leejunhui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 底层探索 - 类</title>
    <link href="http://leejunhui.com/2020/01/06/iOS-%E5%BA%95%E5%B1%82%E6%8E%A2%E7%B4%A2-%E7%B1%BB/"/>
    <id>http://leejunhui.com/2020/01/06/iOS-底层探索-类/</id>
    <published>2020-01-05T18:34:29.000Z</published>
    <updated>2020-01-05T18:35:23.497Z</updated>
    
    <content type="html"><![CDATA[<p>我们在前面探索了 <code>iOS</code> 中的对象原理，面向对象编程中有一句名言:</p><blockquote><p>万物皆对象</p></blockquote><p>那么对象又是从哪来的呢？有过面向对象编程基础的同学肯定都知道是类派生出对象的，那么今天我们就一起来探索一下类的底层原理吧。</p><a id="more"></a><h1 id="一、iOS-中的类到底是什么？"><a href="#一、iOS-中的类到底是什么？" class="headerlink" title="一、iOS 中的类到底是什么？"></a>一、<code>iOS</code> 中的类到底是什么？</h1><p>我们在日常开发中大多数情况都是从 <code>NSObject</code> 这个基类来派生出我们需要的类。那么在 <code>OC</code> 底层，我们的类 <code>Class</code> 到底被编译成什么样子了呢？</p><p>我们新建一个 <code>macOS</code> 控制台项目，然后新建一个 <code>Animal</code> 类出来。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Animal.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Animal</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Animal.m</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Animal</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Animal.h"</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        Animal *animal = [[Animal alloc] init];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>, animal);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在终端执行 <code>clang</code> 命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc main.m -o main.cpp</span><br></pre></td></tr></table></figure><p>这个命令是将我们的 <code>main.m</code> 重写成 <code>main.cpp</code>，我们打开这个文件搜索 <code>Animal</code>:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6461e2831f236?w=1759&h=405&f=png&s=83902" alt></p><p>我们发现有多个地方都出现了 <code>Animal</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> <span class="title">Animal</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal_IMPL</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> <span class="title">NSObject_IVARS</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">objc_getClass(<span class="string">"Animal"</span>)</span><br></pre></td></tr></table></figure><p>我们先全局搜索第一个 <code>typedef struct objc_object</code>，发现有 843 个结果</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6465a4d9639bf?w=1639&h=25&f=png&s=5612" alt></p><p>我们通过 <code>Command + G</code> 快捷键快速翻阅一下，最终在 7626 行找到了 <code>Class</code> 的定义:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> *<span class="title">Class</span>;</span></span><br></pre></td></tr></table></figure><p>由这行代码我们可以得出一个结论，<code>Class</code> 类型在底层是一个结构体类型的指针，这个结构体类型为 <code>objc_class</code>。<br>再搜索 <code>typedef struct objc_class</code> 发现搜不出来了，这个时候我们需要在 <code>objc4-756</code> 源码中进行探索了。</p><p>我们在 <code>objc4-756</code> 源码中直接搜索 <code>struct objc_class</code> ，然后定位到 <code>objc-runtime-new.h</code> 文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> :</span> objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;</span></span><br><span class="line">    Class superclass;</span><br><span class="line">    <span class="keyword">cache_t</span> cache;             <span class="comment">// formerly cache pointer and vtable</span></span><br><span class="line">    <span class="keyword">class_data_bits_t</span> bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class_rw_t</span> *data() &#123; </span><br><span class="line">        <span class="keyword">return</span> bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里，细心的读者可能会发现，我们在前面探索对象原理中遇到的 <code>objc_object</code> 再次出现了，并且这次是作为 <code>objc_class</code> 的父类。这里再次引用那句经典名言 <strong>万物皆对象</strong>，也就是说类其实也是一种<strong>对象</strong>。</p><p>由此，我们可以简单总结一下类和对象在 <code>C</code> 和 <code>OC</code> 中分别的定义</p><table><thead><tr><th>C</th><th>OC</th></tr></thead><tbody><tr><td>objc_object</td><td>NSObject</td></tr><tr><td>objc_class</td><td>NSObject(Class)</td></tr></tbody></table><h1 id="二、类的结构是什么样的呢？"><a href="#二、类的结构是什么样的呢？" class="headerlink" title="二、类的结构是什么样的呢？"></a>二、类的结构是什么样的呢？</h1><p>通过上面的探索，我们已经知道了类本质上也是对象，而日常开发中常见的成员变量、属性、方法、协议等都是在类里面存在的，那么我们是不是可以猜想在 <code>iOS</code> 底层，类其实就存储了这些内容呢？</p><p>我们可以通过分析源码来验证我们的猜想。</p><p>从上一节中 <code>objc_class</code> 的定义处，我们可以梳理出 <code>Class</code> 中的 4 个属性</p><ul><li><code>isa</code> 指针</li><li><code>superclass</code> 指针</li><li><code>cache</code></li><li><code>bits</code></li></ul><blockquote><p>需要值得注意的是，这里的 <code>isa</code> 指针在这里是隐藏属性.</p></blockquote><h2 id="2-1-isa-指针"><a href="#2-1-isa-指针" class="headerlink" title="2.1 isa 指针"></a>2.1 <code>isa</code> 指针</h2><p>首先是 <code>isa</code> 指针，我们之前已经探索过了，在对象初始化的时候，通过 <code>isa</code> 可以让对象和类关联，这一点很好理解，可是为什么在类结构里面还会有 <code>isa</code> 呢？看过上一篇文章的同学肯定知道这个问题的答案了。没错，就是<strong>元类</strong>。我们的对象和类关联起来需要 <code>isa</code>，同样的，类和元类之间关联也需要 <code>isa</code>。</p><h2 id="2-2-superclass-指针"><a href="#2-2-superclass-指针" class="headerlink" title="2.2 superclass 指针"></a>2.2 <code>superclass</code> 指针</h2><p>顾名思义，<code>superclass</code> 指针表明当前类指向的是哪个父类。一般来说，类的根父类基本上都是 <code>NSObject</code> 类。根元类的父类也是 <code>NSObject</code> 类。</p><h2 id="2-3-cache-缓存"><a href="#2-3-cache-缓存" class="headerlink" title="2.3 cache 缓存"></a>2.3 <code>cache</code> 缓存</h2><p><code>cache</code> 的数据结构为 <code>cache_t</code>，其定义如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cache_t</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bucket_t</span> *_<span class="title">buckets</span>;</span></span><br><span class="line">    <span class="keyword">mask_t</span> _mask;</span><br><span class="line">    <span class="keyword">mask_t</span> _occupied;</span><br><span class="line">    </span><br><span class="line">    ...省略代码...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的缓存里面存放的是什么呢？是属性？是实例变量？还是方法？我们可以通过阅读 <code>objc-cache.mm</code> 源文件来解答这个问题。</p><blockquote><ul><li>objc-cache.m</li><li>Method cache management</li><li>Cache flushing</li><li>Cache garbage collection</li><li>Cache instrumentation</li><li>Dedicated allocator for large caches</li></ul></blockquote><p>上面是 <code>objc-cache.mm</code> 源文件的注释信息，我们可以看到 <code>Method cache management</code> 的出现，翻译过来就是方法缓存管理。那么是不是就是说 <code>cache</code> 属性就是缓存的方法呢？而 <code>OC</code> 中的方法我们现在还没有进行探索，先假设我们已经掌握了相关的底层原理，这里先简单提一下。</p><blockquote><p>我们在类里面编写的方法，在底层其实是以 <code>SEL</code> + <code>IMP</code> 的形式存在。<code>SEL</code> 就是方法的选择器，而 <code>IMP</code> 则是具体的方法实现。这里可以以书籍的目录以及内容来类比，我们查找一篇文章的时候，需要先知道其标题(<code>SEL</code>)，然后在目录中看有没有对应的标题，如果有那么就翻到对应的页，最后我们就找到了我们想要的内容。当然，<code>iOS</code> 中方法要比书籍的例子复杂一些，不过暂时可以这么简单的理解，后面我们会深入方法的底层进行探索。</p></blockquote><h2 id="2-4-bits-属性"><a href="#2-4-bits-属性" class="headerlink" title="2.4 bits 属性"></a>2.4 <code>bits</code> 属性</h2><p><code>bits</code> 的数据结构类型是 <code>class_data_bits_t</code>，同时也是一个结构体类型。而我们阅读 <code>objc_class</code> 源码的时候，会发现很多地方都有 <code>bits</code> 的身影，比如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class_rw_t</span> *data() &#123; </span><br><span class="line">    <span class="keyword">return</span> bits.data();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCustomRR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ! bits.hasDefaultRR();</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canAllocFast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assert(!isFuture());</span><br><span class="line">    <span class="keyword">return</span> bits.canAllocFast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里值得我们注意的是，<code>objc_class</code> 的 <code>data()</code> 方法其实是返回的 <code>bits</code> 的 <code>data()</code> 方法，而通过这个 <code>data()</code> 方法，我们发现诸如类的字节对齐、<code>ARC</code>、元类等特性都有 <code>data()</code> 的出现，这间接说明 <code>bits</code> 属性其实是个大容器，有关于内存管理、C++ 析构等内容在其中有定义。</p><p>这里我们会遇到一个十分重要的知识点: <code>class_rw_t</code>，<code>data()</code> 方法的返回值就是 <code>class_rw_t</code> 类型的指针对象。我们在本文后面会重点介绍。</p><h1 id="三、类的属性存在哪？"><a href="#三、类的属性存在哪？" class="headerlink" title="三、类的属性存在哪？"></a>三、类的属性存在哪？</h1><p>上一节我们对 <code>OC</code> 中类结构有了基本的了解，但是我们平时最常打交道的内容-<strong>属性</strong>，我们还不知道它究竟是存在哪个地方。接下来我们要做一件事情，就是在 <code>objc4-756</code> 的源码中新建一个 <code>Target</code>，为什么不直接用上面的 <code>macOS</code> 命令行项目呢？因为我们要开始结合 <code>LLDB</code> 打印一些类的内部信息，所以只能是新建一个依靠于 <code>objc4-756</code> 源码 <code>project</code> 的 <code>target</code> 出来。同样的，我们还是选择 <code>macOS</code> 的命令行作为我们的 <code>target</code>。</p><p>接着我们新建一个类 <code>Person</code>，然后添加一些实例变量和属性出来。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *hobby;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *nickName;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        </span><br><span class="line">        Person *p = [[Person alloc] init];</span><br><span class="line">        Class pClass = object_getClass(p);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们打一个断点到 <code>main.m</code> 文件中的 <code>NSLog</code> 语句处，然后运行刚才新建的 <code>target</code>。</p><p><code>target</code> 跑起来之后，我们在控制台先打印输出一下 <code>pClass</code> 的内容:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f650eea85ff33d?w=375&h=49&f=png&s=7547" alt></p><h2 id="3-1-类的内存结构"><a href="#3-1-类的内存结构" class="headerlink" title="3.1 类的内存结构"></a>3.1 类的内存结构</h2><p>我们这个时候需要借助指针平移来探索，而对于类的内存结构我们先看下面这张表格:</p><table><thead><tr><th>类的内存结构</th><th>大小(字节)</th></tr></thead><tbody><tr><td>isa</td><td>8</td></tr><tr><td>superclass</td><td>8</td></tr><tr><td>cache</td><td>16</td></tr></tbody></table><p>前两个大小很好理解，因为 <code>isa</code> 和 <code>superclass</code> 都是结构体指针，而在 <code>arm64</code> 环境下，一个结构体指针的内存占用大小为 8 字节。而第三个属性 <code>cache</code> 则需要我们进行抽丝剥茧了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cache_t</span> cache;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cache_t</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bucket_t</span> *_<span class="title">buckets</span>;</span> <span class="comment">// 8</span></span><br><span class="line">    <span class="keyword">mask_t</span> _mask;  <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">mask_t</span> _occupied; <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> <span class="keyword">mask_t</span>;</span><br></pre></td></tr></table></figure><p>从上面的代码我们可以看出，<code>cache</code> 属性其实是 <code>cache_t</code> 类型的结构体，其内部有一个 8 字节的结构体指针，有 2 个各为 4 字节的 <code>mask_t</code>。所以加起来就是 16 个字节。也就是说前三个属性总共的内存偏移量为 8 + 8 + 16 = 32 个字节，32 是 10 进制的表示，在 16 进制下就是 20。</p><h2 id="3-2-探索-bits-属性"><a href="#3-2-探索-bits-属性" class="headerlink" title="3.2 探索 bits 属性"></a>3.2 探索 <code>bits</code> 属性</h2><p>我们刚才在控制台打印输出了 <code>pClass</code> 类对象的内容，我们简单画个图如下所示:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6514cefd5534a?w=564&h=120&f=png&s=18928" alt></p><p>那么，类的 <code>bits</code> 属性的内存地址顺理成章的就是在 <code>isa</code> 的初始偏移量地址处进行 16 进制下的 20 递增。也就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x1000021c8 + 0x20 = 0x1000021e8</span><br></pre></td></tr></table></figure><p>我们尝试打印这个地址，注意这里需要强转一下:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6518589fae134?w=417&h=45&f=png&s=8620" alt></p><p>这里报错了，问题其实是出在我们的 <code>target</code> 没有关联上 <code>libobjc.A.dylib</code> 这个动态库，我们关联上重新运行项目</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f651921a57a509?w=1396&h=241&f=png&s=21435" alt></p><p>我们重复一遍上面的流程:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f651a866d5c971?w=378&h=93&f=png&s=14926" alt></p><p>这一次成功了。在 <code>objc_class</code> 源码中有:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class_rw_t</span> *data() &#123; </span><br><span class="line">    <span class="keyword">return</span> bits.data();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不妨打印一下里面的内容：</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f651db9c320a63?w=299&h=35&f=png&s=5693" alt></p><p>返回了一个 <code>class_rw_t</code> 指针对象。我们在 <code>objc4-756</code> 源码中搜索 <code>class_rw_t</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_rw_t</span> &#123;</span></span><br><span class="line">    <span class="comment">// Be warned that Symbolication knows the layout of this structure.</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    <span class="keyword">uint32_t</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">class_ro_t</span> *ro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">method_array_t</span> methods;</span><br><span class="line">    <span class="keyword">property_array_t</span> properties;</span><br><span class="line">    <span class="keyword">protocol_array_t</span> protocols;</span><br><span class="line"></span><br><span class="line">    Class firstSubclass;</span><br><span class="line">    Class nextSiblingClass;</span><br><span class="line">    </span><br><span class="line">    ...省略代码...    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然的，<code>class_rw_t</code> 也是一个结构体类型，其内部有 <code>methods</code>、<code>properties</code>、<code>protocols</code> 等我们十分熟悉的内容。我们先猜想一下，我们的属性应该存放在 <code>class_rw_t</code> 的 <code>properties</code> 里面。为了验证我们的猜想，我们接着进行 <code>LLDB</code> 打印:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6522da09563dc?w=400&h=498&f=png&s=42266" alt></p><p>我们再接着打印 <code>properties</code>:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6523636f6b969?w=193&h=48&f=png&s=3123" alt></p><p><code>properties</code> 居然是空的，难道是 bug?其实不然，这里我们还漏掉了一个非常重要的属性 <code>ro</code>。我们来到它的定义:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_ro_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    <span class="keyword">uint32_t</span> instanceStart;</span><br><span class="line">    <span class="keyword">uint32_t</span> instanceSize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="keyword">uint32_t</span> reserved;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> * ivarLayout;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * name;</span><br><span class="line">    <span class="keyword">method_list_t</span> * baseMethodList;</span><br><span class="line">    <span class="keyword">protocol_list_t</span> * baseProtocols;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">ivar_list_t</span> * ivars;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> * weakIvarLayout;</span><br><span class="line">    <span class="keyword">property_list_t</span> *baseProperties;</span><br><span class="line"></span><br><span class="line">    ...隐藏代码...    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ro</code> 的类型是 <code>class_ro_t</code> 结构体，它包含了 <code>baseMethodList</code>、<code>baseProtocols</code>、<code>ivars</code>、<code>baseProperties</code> 等属性。我们刚才在 <code>class_rw_t</code> 中没有找到我们声明在 <code>Person</code> 类中的实例变量 <code>hobby</code> 和属性 <code>nickName</code>，那么希望就在 <code>class_ro_t</code> 身上了，我们打印看看它的内容:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6527a9d0588bc?w=335&h=257&f=png&s=29412" alt></p><p>根据名称我们猜测属性应该在 <code>baseProperties</code> 里面，我们打印看看:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6528a74e5ce89?w=581&h=160&f=png&s=24141" alt></p><p>Bingo! 我们的属性 <code>nickName</code> 被找到了，那么我们的实例变量 <code>hobby</code> 呢？我们从 $8 的 count 为 1 可以得知肯定不在 <code>baseProperites</code> 里面。根据名称我们猜测应该是在 <code>ivars</code> 里面。</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f652ac4c248593?w=421&h=247&f=png&s=25177" alt></p><p>哈哈，<code>hobby</code> 实例变量也被我们找到了，不过这里的 <code>count</code> 为什么是 2 呢？我们打印第二个元素看看:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f652bca34f6ae2?w=341&h=125&f=png&s=12825" alt></p><p>结果为 <code>_nickName</code>。这一结果证实了编译器会帮助我们给属性 <code>nickName</code> 生成一个带下划线前缀的实例变量 <code>_nickName</code>。</p><p>至此，我们可以得出以下结论:</p><blockquote><p><code>class_ro_t</code> 是在编译时就已经确定了的，存储的是类的成员变量、属性、方法和协议等内容。<br><code>class_rw_t</code> 是可以在运行时来拓展类的一些属性、方法和协议等内容。</p></blockquote><h1 id="四、类的方法存在哪？"><a href="#四、类的方法存在哪？" class="headerlink" title="四、类的方法存在哪？"></a>四、类的方法存在哪？</h1><p>研究完了类的属性是怎么存储的，我们再来看看类的方法。</p><p>我们先给我们的 <code>Person</code> 类增加一个 <code>sayHello</code> 的实例方法和一个 <code>sayHappy</code> 的类方法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.h</span></span><br><span class="line">- (<span class="keyword">void</span>)sayHello;</span><br><span class="line">+ (<span class="keyword">void</span>)sayHappy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person.m</span></span><br><span class="line">- (<span class="keyword">void</span>)sayHello</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)sayHappy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照上面的思路，我们直接读取 <code>class_ro_t</code> 中的 <code>baseMethodList</code> 的内容:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6532607dfb725?w=592&h=182&f=png&s=22289" alt></p><p><code>sayHello</code> 被打印出来了，说明 <code>baseMethodList</code> 就是存储实例方法的地方。我们接着打印剩下的内容:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f653375733d8ec?w=595&h=274&f=png&s=43368" alt></p><p>可以看到 <code>baseMethodList</code> 中除了我们的实例方法 <code>sayHello</code> 外，还有属性 <code>nickName</code> 的 <code>getter</code> 和 <code>setter</code> 方法以及一个 <code>C++</code> 析构方法。但是我们的类方法 <code>sayHappy</code> 并没有被打印出来。</p><h1 id="五、类的类方法存在哪？"><a href="#五、类的类方法存在哪？" class="headerlink" title="五、类的类方法存在哪？"></a>五、类的类方法存在哪？</h1><p>我们上面已经得到了属性，实例方法的是怎么样存储，还留下了一个疑问点，就是类方法是怎么存储的，接下来我们用 <code>Runtime</code> 的 API 来实际测试一下。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.m</span></span><br><span class="line"><span class="keyword">void</span> testInstanceMethod_classToMetaclass(Class pClass)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *className = class_getName(pClass);</span><br><span class="line">    Class metaClass = objc_getMetaClass(className);</span><br><span class="line">    </span><br><span class="line">    Method method1 = class_getInstanceMethod(pClass, <span class="keyword">@selector</span>(sayHello));</span><br><span class="line">    Method method2 = class_getInstanceMethod(metaClass, <span class="keyword">@selector</span>(sayHello));</span><br><span class="line"></span><br><span class="line">    Method method3 = class_getInstanceMethod(pClass, <span class="keyword">@selector</span>(sayHappy));</span><br><span class="line">    Method method4 = class_getInstanceMethod(metaClass, <span class="keyword">@selector</span>(sayHappy));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p-%p-%p-%p"</span>,method1,method2,method3,method4);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        </span><br><span class="line">        Person *p = [[Person alloc] init];</span><br><span class="line">        Class pClass = object_getClass(p);</span><br><span class="line">        </span><br><span class="line">        testInstanceMethod_classToMetaclass(pClass);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后打印结果如下:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f65385ab1b0f8d?w=719&h=34&f=png&s=12884" alt></p><p>首先 <code>testInstanceMethod_classToMetaclass</code> 方法测试的是分别从类和元类去获取实例方法、类方法的结果。由打印结果我们可以知道：</p><ul><li>对于类对象来说，<code>sayHello</code> 是实例方法，存储于类对象的内存中，不存在于元类对象中。而 <code>sayHappy</code> 是类方法，存储于元类对象的内存中，不存在于类对象中。</li><li>对于元类对象来说，<code>sayHello</code> 是类对象的实例方法，跟元类没关系；<code>sayHappy</code> 是元类对象的实例方法，所以存在元类中。</li></ul><p>我们再接着测试:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.m</span></span><br><span class="line"><span class="keyword">void</span> testClassMethod_classToMetaclass(Class pClass)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *className = class_getName(pClass);</span><br><span class="line">    Class metaClass = objc_getMetaClass(className);</span><br><span class="line">    </span><br><span class="line">    Method method1 = class_getClassMethod(pClass, <span class="keyword">@selector</span>(sayHello));</span><br><span class="line">    Method method2 = class_getClassMethod(metaClass, <span class="keyword">@selector</span>(sayHello));</span><br><span class="line"></span><br><span class="line">    Method method3 = class_getClassMethod(pClass, <span class="keyword">@selector</span>(sayHappy));</span><br><span class="line">    Method method4 = class_getClassMethod(metaClass, <span class="keyword">@selector</span>(sayHappy));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p-%p-%p-%p"</span>,method1,method2,method3,method4);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        </span><br><span class="line">        Person *p = [[Person alloc] init];</span><br><span class="line">        Class pClass = object_getClass(p);</span><br><span class="line">        </span><br><span class="line">        testClassMethod_classToMetaclass(pClass);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后打印结果如下:</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f653a695dc434e?w=696&h=35&f=png&s=12221" alt></p><p>从结果我们可以看出，对于类对象来说，通过 <code>class_getClassMethod</code> 获取 <code>sayHappy</code> 是有值的，而获取 <code>sayHello</code> 是没有值的；对于元类对象来说，通过 <code>class_getClassMethod</code> 获取 <code>sayHappy</code> 也是有值的，而获取 <code>sayHello</code> 是没有值的。这里第一点很好理解，但是第二点会有点让人糊涂，不是说类方法在元类中是体现为对象方法的吗？怎么通过 <code>class_getClassMethod</code> 从元类中也能拿到 <code>sayHappy</code>，我们进入到 <code>class_getClassMethod</code> 方法内部可以解开这个疑惑:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Method <span class="title">class_getClassMethod</span><span class="params">(Class cls, SEL sel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls  ||  !sel) <span class="keyword">return</span> nil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> class_getInstanceMethod(cls-&gt;getMeta(), sel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Class <span class="title">getMeta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isMetaClass()) <span class="keyword">return</span> (Class)<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ISA();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以很清楚的看到，<code>class_getClassMethod</code> 方法底层其实调用的是 <code>class_getInstanceMethod</code>，而 <code>cls-&gt;getMeta()</code> 方法底层的判断逻辑是如果已经是元类就返回，如果不是就返回类的 <code>isa</code>。这也就解释了上面的 <code>sayHappy</code> 为什么会出现在最后的打印中了。</p><p>除了上面的 <code>LLDB</code> 打印，我们还可以通过 <code>isa</code> 的方式来验证类方法存放在元类中。</p><ul><li>通过 isa 在类对象中找到元类</li><li>打印元类的 baseMethodsList</li></ul><p>具体的过程笔者不再赘述。</p><h1 id="六、类和元类的创建时机"><a href="#六、类和元类的创建时机" class="headerlink" title="六、类和元类的创建时机"></a>六、类和元类的创建时机</h1><p>我们在探索类和元类的时候，对于其创建时机还不是很清楚，这里我们先抛出结论：</p><ul><li>类和元类是在编译期创建的，即在进行 alloc 操作之前，类和元类就已经被编译器创建出来了。</li></ul><p>那么如何来证明呢，我们有两种方式可以来证明:</p><ul><li><code>LLDB</code> 打印类和元类的指针</li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f654895364c7c5?w=642&h=389&f=png&s=76084" alt></p><ul><li>编译项目后，使用 <code>MachoView</code> 打开程序二进制可执行文件查看:</li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/1/2/16f6549873654a90?w=1303&h=687&f=png&s=116926" alt></p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><ul><li>类和元类创建于编译时，可以通过 <code>LLDB</code> 来打印类和元类的指针，或者 <code>MachOView</code> 查看二进制可执行文件</li><li>万物皆对象：类的本质就是对象</li><li>类在 <code>class_ro_t</code> 结构中存储了编译时确定的属性、成员变量、方法和协议等内容。</li><li>实例方法存放在类中</li><li>类方法存放在元类中</li></ul><p>我们完成了对 <code>iOS</code> 中类的底层探索，下一章我们将对类的缓存进行深一步探索，敬请期待~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在前面探索了 &lt;code&gt;iOS&lt;/code&gt; 中的对象原理，面向对象编程中有一句名言:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;万物皆对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么对象又是从哪来的呢？有过面向对象编程基础的同学肯定都知道是类派生出对象的，那么今天我们就一起来探索一下类的底层原理吧。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS 底层原理" scheme="http://leejunhui.com/categories/iOS-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="iOS" scheme="http://leejunhui.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://leejunhui.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS 底层探索 - calloc&amp;isa</title>
    <link href="http://leejunhui.com/2020/01/05/iOS-%E5%BA%95%E5%B1%82%E6%8E%A2%E7%B4%A2-calloc-isa/"/>
    <id>http://leejunhui.com/2020/01/05/iOS-底层探索-calloc-isa/</id>
    <published>2020-01-05T03:37:49.000Z</published>
    <updated>2020-01-05T18:33:37.244Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章主要我们探索了 <code>iOS</code>  对象的 <code>alloc</code> 和 <code>init</code> 以及对象是怎么开辟内存以及初始化的，如果在对象身上增加一些属性，是否会影响内存开辟呢？还有一个遗留问题就是通过 <code>calloc</code> ，我们的对象有了内存地址，但是对象结构里面的 <code>isa</code> 是怎么关联到我们的对象的内存地址的呢。</p><a id="more"></a><p><a name="qYVo0"></a></p><h1 id="calloc-底层探索"><a href="#calloc-底层探索" class="headerlink" title="calloc 底层探索"></a><code>calloc</code> 底层探索</h1><p>在探索 <code>calloc</code> 底层前，我们先补充一下内存对齐相关的知识点。</p><p><a name="ee5b93f3"></a></p><h2 id="内存对齐三原则"><a href="#内存对齐三原则" class="headerlink" title="内存对齐三原则"></a>内存对齐三原则</h2><p>在 <code>iOS</code> 中，对象的属性需要进行内存对齐，而对象本身也需要进行内存对齐。<br>内存对齐有三原则</p><ul><li>数据成员对齐原则: 结构( <code>struct</code> )(或联合( <code>union</code> ))的数据成员，第<br><br>一个数据成员放在 offset 为 0 的地方，以后每个数据成员存储的起始位置要<br><br>从该成员大小或者成员的子成员大小</li><li>结构体作为成员: 如果一个结构里有某些结构体成员,则结构体成员要从<br><br>其内部最大元素大小的整数倍地址开始存储</li><li>收尾工作: 结构体的总大小,也就是 <code>sizeof</code> 的结果,.必须是其内部最大<br><br>成员的整数倍.不足的要补⻬。<br><br>翻译一下就是：</li><li><strong>前面的地址必须是后面的地址正数倍,不是就补齐</strong></li><li>结构体里面的嵌套结构体大小要以该<strong>嵌套结构体最大元素大小的整数倍</strong></li><li><strong>整个 **`</strong>Struct<strong>` **的地址必须是最大字节的整数倍</strong></li></ul><p><a name="b11a31a7"></a></p><h2 id="对象申请内存和系统开辟内存"><a href="#对象申请内存和系统开辟内存" class="headerlink" title="对象申请内存和系统开辟内存"></a>对象申请内存和系统开辟内存</h2><p>我们通过打印下面的代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%lu - %lu"</span>,class_getInstanceSize([p <span class="keyword">class</span>]),malloc_size((__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(p)));</span><br></pre></td></tr></table></figure><p>可以发现对象自己申请的内存大小与系统实际给我们开辟的大小时不一样的，这里对象申请的内存大小是 <strong>40</strong> 个字节，而系统开辟的是 <strong>48</strong> 个字节。</p><p>40 个字节不难理解，是因为当前对象有 4 个属性，有三个属性为 8 个字节，有一个属性为 4个字节，再加上 isa 的 8 个字节，就是 32 + 4 = 36 个字节，然后根据内存对齐原则，36 不能被 8 整除，36 往后移动刚好到了 40 就是 8 的倍数，所以内存大小为 40。</p><p>48 个字节的话需要我们探索 <code>calloc</code> 的底层原理。</p><p>这里还有一个注意点，就是 <code>class_getInstanceSize</code> 和 <code>malloc_size</code> 对同一个对象返回的结果不一样的，原因是 <code>malloc_size</code> 是直接返回的 <code>calloc</code> 之后的指针的大小，回忆上一节课，这里有一步在调用 <code>calloc</code> 之前的操作如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">size_t instanceSize(size_t extraBytes) &#123;</span><br><span class="line">    size_t size = alignedInstanceSize() + extraBytes;</span><br><span class="line">    // CF requires all objects be at least 16 bytes.</span><br><span class="line">    if (size &lt; 16) size = 16;</span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>class_getInstanceSize</code> 内部实现是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size_t class_getInstanceSize(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    if (!cls) return 0;</span><br><span class="line">    return cls-&gt;alignedInstanceSize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说 <code>class_getInstanceSize</code> 会输出 8 个字节，<code>malloc_size</code> 会输出 16 个字节，当然前提是该对象没有任何属性。</p><p><a name="ff23f086"></a></p><h2 id="探索-calloc-底层"><a href="#探索-calloc-底层" class="headerlink" title="探索 calloc 底层"></a>探索 calloc 底层</h2><p>我们从 <code>calloc</code> 函数出发，但是我们直接在 <code>libObjc</code> 的源码中是找不到其对应实现的，通过观察 Xcode 我们知道其实应该找 <code>libMalloc</code> 源码才对:</p><p><a href="https://imgchr.com/i/QTO39A" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265ae536110?w=680&h=536&f=jpeg&s=80287" alt></a></p><p>这里有个小技巧，其实我们研究的是 <code>calloc</code> 的底层原理，而 <code>libObjc</code> 和 <code>libMalloc</code> 是相互独立的，所以在 <code>libMalloc</code> 源码里面，我们没必要去走 <code>calloc</code> 前面的流程了。我们通过断点调试 <code>libObjc</code> 源码可以知道第二个参数是 40: (这是因为当前发送 <code>alloc</code> 消息的对象有 4 个属性，每个属性 8 个字节，再加上 isa 的 8 个字节，所以就是 40 个字节)</p><p><a href="https://imgchr.com/i/QTjuJH" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265aea6aeb3?w=680&h=292&f=jpeg&s=34893" alt></a></p><p>接下来我们打开 <code>libMalloc</code> 的源码，在新建的 target 中直接手动声明如下的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void *p = calloc(1, 40);</span><br><span class="line">NSLog(@&quot;%lu&quot;,malloc_size(p));</span><br></pre></td></tr></table></figure><p>但 <code>Command + Run</code> 之后我们会看到报错信息:</p><p><a href="https://imgchr.com/i/QTvVcn" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265b04a3886?w=680&h=204&f=jpeg&s=46381" alt></a></p><p>这个时候我们会使用搜索大法，直接 <code>Command + Shift + F</code> 进行全局搜索对应的符号，但是会发现找不到，我们再仔细观察，这些符号都是位于 <code>.o</code> 文件里面的，所以我们可以去掉符号前面的下划线再进行搜索，这个时候就可以把对应的代码注释然后重新运行了。</p><p>运行之后我们一直沿着源码断点下去，会来到这么一段代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptr = zone-&gt;calloc(zone, num_items, size);</span><br></pre></td></tr></table></figure><p>我们如果直接去找 <code>calloc</code>，就会递归了，所以我们需要点进去，然后我们会发现一个很复杂的东西出现了:</p><p><a href="https://imgchr.com/i/Q7kfL4" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265b4c07f50?w=680&h=274&f=jpeg&s=60910" alt></a></p><p>这里我们可以直接在断点处使用 <code>LLDB</code> 命令打印这行代码来看具体实现是位于哪个文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p zone-&gt;calloc</span><br><span class="line">输出: (void *(*)(_malloc_zone_t *, size_t, size_t)) $1 = 0x00000001003839c7 (.dylib`default_zone_calloc at malloc.c:249)</span><br></pre></td></tr></table></figure><p>也就是说 <code>zone-&gt;alloc</code> 的真正实现是在 <code>malloc.c</code> 源文件的249行处。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *</span><br><span class="line">default_zone_calloc(<span class="keyword">malloc_zone_t</span> *zone, <span class="keyword">size_t</span> num_items, <span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">zone = runtime_default_zone();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> zone-&gt;<span class="built_in">calloc</span>(zone, num_items, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们发现这里又是一次 <code>zone-&gt;calloc</code>，我们接着再次使用 <code>LLDB</code> 打印内存地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p zone-&gt;calloc</span><br><span class="line">输出: (void *(*)(_malloc_zone_t *, size_t, size_t)) $0 = 0x0000000100384faa (.dylib`nano_calloc at nano_malloc.c:884)</span><br></pre></td></tr></table></figure><p>我们再次来到 <code>nano_calloc</code> 方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *</span><br><span class="line">nano_calloc(nanozone_t *nanozone, size_t num_items, size_t size)</span><br><span class="line">&#123;</span><br><span class="line">size_t total_bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (calloc_get_size(num_items, size, <span class="number">0</span>, &amp;total_bytes)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (total_bytes &lt;= NANO_MAX_SIZE) &#123;</span><br><span class="line"><span class="keyword">void</span> *p = _nano_malloc_check_clear(nanozone, total_bytes, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (p) &#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* FALLTHROUGH to helper zone */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">malloc_zone_t *zone = (malloc_zone_t *)(nanozone-&gt;helper_zone);</span><br><span class="line"><span class="keyword">return</span> zone-&gt;calloc(zone, <span class="number">1</span>, total_bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们简单分析一下，应该往 <code>_nano_malloc_check_clear</code> 里面继续走，然后我们发现 <code>_nano_malloc_check_clear</code> 里面内容非常多，这个时候我们要明确一点，我们的目的是找出 48 是怎么算出来的，经过分析之后，我们来到 <code>segregated_size_to_fit</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> MALLOC_INLINE <span class="keyword">size_t</span></span><br><span class="line">segregated_size_to_fit(<span class="keyword">nanozone_t</span> *nanozone, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> *pKey)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// size = 40</span></span><br><span class="line"><span class="keyword">size_t</span> k, slot_bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == size) &#123;</span><br><span class="line">size = NANO_REGIME_QUANTA_SIZE; <span class="comment">// Historical behavior</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 40 + 16-1 &gt;&gt; 4 &lt;&lt; 4</span></span><br><span class="line"><span class="comment">// 40 - 16*3 = 48</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 16</span></span><br><span class="line">k = (size + NANO_REGIME_QUANTA_SIZE - <span class="number">1</span>) &gt;&gt; SHIFT_NANO_QUANTUM; <span class="comment">// round up and shift for number of quanta</span></span><br><span class="line">slot_bytes = k &lt;&lt; SHIFT_NANO_QUANTUM;<span class="comment">// multiply by power of two quanta size</span></span><br><span class="line">*pKey = k - <span class="number">1</span>;<span class="comment">// Zero-based!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> slot_bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看出进行的是 16 字节对齐，那么也就是说我们传入的 <code>size</code> 是 40，在经过 (40 + 16 - 1) &gt;&gt; 4 &lt;&lt; 4 操作后，结果为48，也就是16的整数倍。</p><p>总结:</p><ul><li>对象的属性是进行的 8 字节对齐</li><li>对象自己进行的是 16 字节对齐<ul><li>因为内存是连续的，通过 16 字节对齐规避风险和容错，防止访问溢出</li><li>同时，也提高了寻址访问效率，也就是<strong>空间换时间</strong></li></ul></li></ul><p><a href="https://imgchr.com/i/Q7eJv6" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265b5c3cf95?w=680&h=707&f=png&s=189346" alt></a></p><p><a name="GhMIX"></a></p><h1 id="isa-底层探索"><a href="#isa-底层探索" class="headerlink" title="isa 底层探索"></a><code>isa</code> 底层探索</h1><p><a name="c69c2adf"></a></p><h2 id="联合体位域"><a href="#联合体位域" class="headerlink" title="联合体位域"></a>联合体位域</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> isa_t &#123;</span><br><span class="line">    isa_t() &#123; &#125;</span><br><span class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Class cls;</span><br><span class="line">    uintptr_t bits;</span><br><span class="line"><span class="meta">#if defined(ISA_BITFIELD)</span></span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        ISA_BITFIELD;  <span class="comment">// defined in isa.h</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们探索 <code>isa</code> 的时候，会发现 <code>isa</code> 其实是一个联合体，而这其实是从内存管理层面来设计的，因为联合体是所有成员共享一个内存，联合体内存的大小取决于内部成员内存大小最大的那个元素，对于 <code>isa</code> 指针来说，就不用额外声明很多的属性，直接在内部的 <code>ISA_BITFIELD</code> 保存信息。同时由于联合体属性间是互斥的，所以 <code>cls</code> 和 <code>bits</code> 在 <code>isa</code> 初始化流程时是在两个分支中被赋值的。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265b865e5f1?w=1212&h=1052&f=png&s=765507" alt="image.png"></p><p><a name="b98d0c8d"></a></p><h2 id="isa-结构"><a href="#isa-结构" class="headerlink" title="isa 结构"></a>isa 结构</h2><p><code>isa</code> 作为一个联合体，有一个结构体属性为 <code>ISA_BITFIELD</code>，其大小为 8 个字节，也就是 64 位。<br>下面的代码是基于 <code>arm64</code> 架构的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_BITFIELD                                                      \</span></span><br><span class="line">      <span class="keyword">uintptr_t</span> nonpointer        : <span class="number">1</span>;                                       \</span><br><span class="line">      <span class="keyword">uintptr_t</span> has_assoc         : <span class="number">1</span>;                                       \</span><br><span class="line">      <span class="keyword">uintptr_t</span> has_cxx_dtor      : <span class="number">1</span>;                                       \</span><br><span class="line">      <span class="keyword">uintptr_t</span> shiftcls          : <span class="number">33</span>; <span class="comment">/*MACH_VM_MAX_ADDRESS 0x1000000000*/</span> \</span><br><span class="line">      <span class="keyword">uintptr_t</span> magic             : <span class="number">6</span>;                                       \</span><br><span class="line">      <span class="keyword">uintptr_t</span> weakly_referenced : <span class="number">1</span>;                                       \</span><br><span class="line">      <span class="keyword">uintptr_t</span> deallocating      : <span class="number">1</span>;                                       \</span><br><span class="line">      <span class="keyword">uintptr_t</span> has_sidetable_rc  : <span class="number">1</span>;                                       \</span><br><span class="line">      <span class="keyword">uintptr_t</span> extra_rc          : <span class="number">19</span></span><br></pre></td></tr></table></figure><ul><li><code>nonpointer</code>: 表示是否对 <code>isa</code> 指针开启指针优化<ul><li>0: 纯 <code>isa</code> 指针</li><li>1: 不止是类对象地址, <code>isa</code> 中包含了类信息、对象的引用计数等</li></ul></li><li>has_assoc: 关联对象标志位，0 没有，1 存在</li><li>has_cxx_dtor: 该对象是否有 C++ 或者 Objc 的析构器,如果有析构函数,则需要做析构逻辑, 如果没有,则可以更快的释放对象</li><li>shiftcls: 存储类指针的值。开启指针优化的情况下，在 arm64 架构中有 33 位用来存储类指针。</li><li>magic: 用于调试器判断当前对象是真的对象还是没有初始化的空间</li><li>weakly_referenced: 标志对象是否被指向或者曾经指向一个 ARC 的弱变量，<br><br>没有弱引用的对象可以更快释放。</li><li>deallocating: 标志对象是否正在释放内存</li><li>has_sidetable_rc: 当对象引用技术大于 10 时，则需要借用该变量存储进位</li><li>extra_rc: 当表示该对象的引用计数值，实际上是引用计数值减 1， 例如，如果对象的引用计数为 10，那么 extra_rc 为 9。如果引用计数大于 10， 则需要使用到下面的 has_sidetable_rc。</li></ul><p><a name="H7vwo"></a></p><h2 id="isa-关联对象和类"><a href="#isa-关联对象和类" class="headerlink" title="isa 关联对象和类"></a>isa 关联对象和类</h2><p><code>isa</code> 是对象中的第一个属性，因为这一步是在继承的时候发生的，要早于对象的成员变量，属性列表，方法列表以及所遵循的协议列表。</p><p>我们在探索 <code>alloc</code> 底层原理的时候，有一个方法叫做 <code>initIsa</code>。</p><p>这个方法的作用就是初始化 <code>isa</code> 联合体位域。其中有这么一行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newisa.shiftcls = (<span class="keyword">uintptr_t</span>)cls &gt;&gt; <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>通过这行代码，我们知道 <code>shiftcls</code> 这个位域其实存储的是类的信息。这个类就是实例化对象所指向的那个类。</p><p>通过 <code>LLDB</code> 进行调试打印，我们可以知道一个对象的 <code>isa</code> 会关联到这个对象所属的类。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265eb174e37?w=1692&h=630&f=jpeg&s=266761" alt></p><p>这里的左移右移操作其实很好理解，首先我们先观察 <code>isa</code> 的 <code>ISA_BITFIELD</code> 位域的结构:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注：这里是x64架构</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">elif</span> __x86_64__</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x00007ffffffffff8ULL</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MAGIC_MASK  0x001f800000000001ULL</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MAGIC_VALUE 0x001d800000000001ULL</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_BITFIELD                                                        \</span></span><br><span class="line">      <span class="keyword">uintptr_t</span> nonpointer        : <span class="number">1</span>;                                         \</span><br><span class="line">      <span class="keyword">uintptr_t</span> has_assoc         : <span class="number">1</span>;                                         \</span><br><span class="line">      <span class="keyword">uintptr_t</span> has_cxx_dtor      : <span class="number">1</span>;                                         \</span><br><span class="line">      <span class="keyword">uintptr_t</span> shiftcls          : <span class="number">44</span>; <span class="comment">/*MACH_VM_MAX_ADDRESS 0x7fffffe00000*/</span> \</span><br><span class="line">      <span class="keyword">uintptr_t</span> magic             : <span class="number">6</span>;                                         \</span><br><span class="line">      <span class="keyword">uintptr_t</span> weakly_referenced : <span class="number">1</span>;                                         \</span><br><span class="line">      <span class="keyword">uintptr_t</span> deallocating      : <span class="number">1</span>;                                         \</span><br><span class="line">      <span class="keyword">uintptr_t</span> has_sidetable_rc  : <span class="number">1</span>;                                         \</span><br><span class="line">      <span class="keyword">uintptr_t</span> extra_rc          : <span class="number">8</span></span><br></pre></td></tr></table></figure><p>我们可以看到，<code>ISA_BITFIELD</code> 的前 3 位是 <code>nonpointer</code>，<code>has_assoc</code>，<code>has_cxx_dtor</code>，中间 44 位是 <code>shiftcls</code> ，后面 17 位是剩余的内容，同时因为 iOS 是小端模式，那么我们就需要去掉右边的 3 位和左边的 17位，所以就会采用 &gt;&gt;3&lt;&lt;3 然后 &lt;&lt;17&gt;&gt;17 的操作了。</p><p>通过这个测试，我们就知道了 <code>isa</code> 实现了对象与类之间的关联。</p><p>我们还可以探索 <code>object_getClass</code> 底层，可以发现有这样一行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return (Class)(isa.bits &amp; ISA_MASK);</span><br></pre></td></tr></table></figure><p>这行代码就是将 <code>isa</code> 中的联合体位域与上一个蒙版，这个蒙版定义是怎么样的呢?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x00007ffffffffff8ULL</span></span><br></pre></td></tr></table></figure><p><code>0x00007ffffffffff8ULL</code> 这个值我们转成二进制表示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> </span><br><span class="line"><span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>结果一目了然，这个蒙版就是帮我们去过滤掉除 <code>shiftcls</code> 之外的内容。</p><p>我们直接将对象的 <code>isa</code> 地址与上这个mask之后，就会得到 <code>object.class</code> 一样的内存地址。</p><p><a name="12e70060"></a></p><h2 id="isa-走位分析"><a href="#isa-走位分析" class="headerlink" title="isa 走位分析"></a>isa 走位分析</h2><p><a name="869985ca"></a></p><h3 id="类与元类"><a href="#类与元类" class="headerlink" title="类与元类"></a>类与元类</h3><p>我们都知道对象可以创建多个，但是类是否可以创建多个呢?<br>答案很简单，一个。那么如果来验证呢?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//MARK: - 分析类对象内存存在个数</span><br><span class="line">void lgTestClassNum()&#123;</span><br><span class="line">    Class class1 = [LGPerson class];</span><br><span class="line">    Class class2 = [LGPerson alloc].class;</span><br><span class="line">    Class class3 = object_getClass([LGPerson alloc]);</span><br><span class="line">    Class class4 = [LGPerson alloc].class;</span><br><span class="line">    NSLog(@&quot;\n%p-\n%p-\n%p-\n%p&quot;,class1,class2,class3,class4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印输出如下:</span><br><span class="line"></span><br><span class="line">0x100002108-</span><br><span class="line">0x100002108-</span><br><span class="line">0x100002108-</span><br><span class="line">0x100002108</span><br></pre></td></tr></table></figure><p>所以我们就知道了类在内存中只会存在一份。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x/4gx LGTeacher.class</span><br><span class="line">0x100001420: 0x001d8001000013f9 0x0000000100b38140</span><br><span class="line">0x100001430: 0x00000001003db270 0x0000000000000000</span><br><span class="line">(lldb) po 0x001d8001000013f9</span><br><span class="line">17082823967917874</span><br><span class="line"></span><br><span class="line">(lldb) p 0x001d8001000013f9</span><br><span class="line">(long) $2 = 8303516107936761</span><br><span class="line">(lldb) po 0x100001420</span><br><span class="line">LGTeacher</span><br></pre></td></tr></table></figure><p>我们通过上面的打印，就发现 类的内存结构里面的第一个结构打印出来还是 <code>LGTeacher</code>，那么是不是就意味着 对象-&gt;类-&gt;类 这样的死循环呢？这里的第二个类其实是 <code>元类</code>。是由系统帮我们创建的。这个元类也无法被我们实例化。</p><p>也就是下面的这种关系:</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265eb419418?w=470&h=131&f=png&s=4319" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p/x 0x001d8001000013f9 &amp; 0x00007ffffffffff8</span><br><span class="line">(long) $4 = 0x00000001000013f8</span><br><span class="line">(lldb) po 0x00000001000013f8</span><br><span class="line">LGTeacher</span><br><span class="line"></span><br><span class="line">(lldb) x/4gx 0x00000001000013f8</span><br><span class="line">0x1000013f8: 0x001d800100b380f1 0x0000000100b380f0</span><br><span class="line">0x100001408: 0x0000000101c30230 0x0000000100000007</span><br><span class="line">(lldb) p/x 0x001d800100b380f1 &amp; 0x00007ffffffffff8</span><br><span class="line">(long) $6 = 0x0000000100b380f0</span><br><span class="line">(lldb) po 0x0000000100b380f0</span><br><span class="line">NSObject</span><br></pre></td></tr></table></figure><p><a name="75d38a5f"></a></p><h3 id="isa-走位"><a href="#isa-走位" class="headerlink" title="isa 走位"></a>isa 走位</h3><p>我们在 Xcode 中测试有以下结果：</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265ee276b43?w=662&h=508&f=jpeg&s=123612" alt></p><p>由此可以给出官方的经典 <code>isa</code> 走位图</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265f729a19f?w=1144&h=1180&f=png&s=248458" alt></p><p><a name="6e99482c"></a></p><h2 id="isa-初始化流程图"><a href="#isa-初始化流程图" class="headerlink" title="isa 初始化流程图"></a>isa 初始化流程图</h2><p><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f35265f7c6bd44?w=1370&h=1621&f=png&s=177793" alt="image.png"><br><a name="wuBQx"></a></p><h1 id="对象的本质"><a href="#对象的本质" class="headerlink" title="对象的本质"></a>对象的本质</h1><p>在我们认知里面，<code>OC</code> 对象的本质就是一个结构体，这个结论在 <code>libObjc</code> 源码的 <code>objc-private.h</code> 源文件中可以得到证实。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">isa_t</span> isa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ISA() assumes this is NOT a tagged pointer object</span></span><br><span class="line">    <span class="function">Class <span class="title">ISA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getIsa() allows this to be a tagged pointer object</span></span><br><span class="line">    <span class="function">Class <span class="title">getIsa</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    ...省略其他的内容...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于对象所属的类来说，我们也可以在 <code>objc-runtime-new.h</code> 源文件中找到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> :</span> objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;</span></span><br><span class="line">    Class superclass;</span><br><span class="line">    <span class="keyword">cache_t</span> cache;             <span class="comment">// formerly cache pointer and vtable</span></span><br><span class="line">    <span class="keyword">class_data_bits_t</span> bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line">    </span><br><span class="line">    ...省略其他的内容...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说 <code>objc_class</code> 内存中第一个位置是 <code>isa</code>，第二个位置是 <code>superclass</code>。</p><p>不过我们本着求真的态度可以用 <code>clang</code> 来重写我们的 <code>OC</code> 源文件来查看是不是这么回事。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc main.m -o main.cpp</span><br></pre></td></tr></table></figure><p>这行命令会把我们的 <code>main.m</code> 文件编译成 <code>C++</code> 格式，输出为 <code>main.cpp</code>。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f352661273fee4?w=958&h=528&f=png&s=82472" alt="image.png"></p><p>我们可以看到 <code>LGPerson</code> 对象在底层其实是一个结构体 <code>objc_object</code> 。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/24/16f3526624819958?w=612&h=94&f=png&s=9884" alt="image.png"></p><p>而我们的 <code>Class</code> 在底层也是一个结构体 <code>objc_class</code> 。</p><p><a name="G7JLN"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此， <code>iOS</code> 底层探索之对象篇更新完毕，现在来回顾一下我们所探索的内容。</p><ul><li>alloc &amp; init 流程剖析</li><li>内存开辟</li><li>字节对齐算法</li><li>isa 初始化和走位</li><li>对象的本质</li></ul><p>下一篇章我们要探索篇章的是类，敬请期待~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章主要我们探索了 &lt;code&gt;iOS&lt;/code&gt;  对象的 &lt;code&gt;alloc&lt;/code&gt; 和 &lt;code&gt;init&lt;/code&gt; 以及对象是怎么开辟内存以及初始化的，如果在对象身上增加一些属性，是否会影响内存开辟呢？还有一个遗留问题就是通过 &lt;code&gt;calloc&lt;/code&gt; ，我们的对象有了内存地址，但是对象结构里面的 &lt;code&gt;isa&lt;/code&gt; 是怎么关联到我们的对象的内存地址的呢。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS 底层原理" scheme="http://leejunhui.com/categories/iOS-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="iOS" scheme="http://leejunhui.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://leejunhui.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS 底层探索 - alloc&amp;init</title>
    <link href="http://leejunhui.com/2020/01/05/iOS-%E5%BA%95%E5%B1%82%E6%8E%A2%E7%B4%A2-alloc-init/"/>
    <id>http://leejunhui.com/2020/01/05/iOS-底层探索-alloc-init/</id>
    <published>2020-01-05T03:17:38.000Z</published>
    <updated>2020-01-05T03:40:43.539Z</updated>
    
    <content type="html"><![CDATA[<p><a name="BrezX"></a></p><p>作为 <code>iOS</code> 开发者，我们每天打交道最多的应该就是对象了，从面向对象设计的角度来说，对象的创建以及初始化是最基础的内容。那么，今天我们就一起来探索一下 <code>iOS</code> 中最常用的 <code>alloc</code> 和 <code>init</code>  的底层是怎么实现的吧。</p><a id="more"></a><p><a name="LrrLo"></a></p><h1 id="如何进行底层探索"><a href="#如何进行底层探索" class="headerlink" title="如何进行底层探索"></a>如何进行底层探索</h1><p>对于第三方开源框架来说，我们去剖析内部原理和细节是有一定的方法和套路可以掌握的。而对于 <code>iOS</code>  底层，特别是 <code>OC</code> 底层，我们可能就需要用到一些开发中不是很常用的方法。</p><p>我们这个系列主要的目的是为了进行底层探索，那么我们作为 <code>iOS</code> 开发者，需要关注应该就是从应用启动到应用被 <code>kill</code> 掉这一整个生命周期的内容。我们不妨从我们最熟悉的 <code>main</code> 函数开始，一般来说，我们在 <code>main.m</code> 文件中打一个断点，左侧的调用堆栈视图应该如下图所示:</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f309764e942815?w=964&h=738&f=png&s=733652" alt="image.png"></p><blockquote><p>要得到这样的调用堆栈有两个注意点:</p><ul><li>需要关闭 <code>Xcode</code> 左侧 <code>Debug</code> 区域最下面的 <code>show only stack frames with debug symbols and between libraries</code></li></ul></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f309764ea68f14?w=902&h=74&f=png&s=31589" alt="image.png"></p><blockquote><ul><li>需要增加一个 <code>_objc_init</code> 的符号端点</li></ul></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f309764eb9c302" alt="image.png"></p><p>我们通过上面的调用堆栈信息不难得出一个简单粗略的加载流程结构</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f309764fee5427?w=783&h=314&f=png&s=7869" alt="iOS粗略流程"></p><p>我们现在心中建立这么一个简单的流程结构，在后期分析底层的时候我们会回过头来梳理整个启动的流程。</p><p>接下来，让我们开始实际的探索过程。</p><p>我们直接打开 <code>Xcode</code> 新建一个 <code>Single View App</code> 工程，然后我们在 <code>ViewController.m</code> 文件中调用 <code>alloc</code> 方法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *p = [<span class="built_in">NSObject</span> alloc];</span><br></pre></td></tr></table></figure><p>我们按照常规探索源码的方式，直接按住 <code>Command</code> + <code>Control</code> 来进入到 <code>alloc</code> 内部实现，但结果并非如我们所愿，我们来到的是一个头文件，只有 <code>alloc</code> 方法的声明，并没有对应的实现。这个时候，我们会陷入深深的怀疑中，其实这个时候我们只要记住下面三种常用探索方式就能迎刃而解：</p><p><a name="E9Zl4"></a></p><h2 id="直接下代码断点"><a href="#直接下代码断点" class="headerlink" title="直接下代码断点"></a>直接下代码断点</h2><p>具体操作方式为 <code>Control</code> + <code>in</code> </p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f3097652ddbabe?w=372&h=66&f=png&s=4558" alt="image.png"> 这里的 <code>in</code> 指的是左侧图片中红色部分的按钮，其实这里的操作叫做 <code>Step into instruction</code> 。我们可以来到下图这里</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f3097654fd6365?w=1884&h=400&f=png&s=191365" alt="image.png"></p><p>我们观察不难得出我们想要找的就是 <code>libobjc.A.dylib</code> 这个动态链接库了。</p><p><a name="NaJlI"></a></p><h2 id="打开反汇编显示"><a href="#打开反汇编显示" class="headerlink" title="打开反汇编显示"></a>打开反汇编显示</h2><p>具体操作方式为打开 <code>Debug</code> 菜单下的 <code>Debug Workflow</code> 下的 <code>Always Show Disassembly</code> </p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f309767976e057?w=1022&h=224&f=png&s=253989" alt="image.png"></p><p>接着我们还是下代码断点，然后一步一步调试也会来到下图这里:</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f309767e89d29f?w=1940&h=384&f=png&s=188650" alt="image.png"></p><p><a name="4Xnxg"></a></p><h2 id="下符号断点"><a href="#下符号断点" class="headerlink" title="下符号断点"></a>下符号断点</h2><p>我们先选择 <code>Symbolic Breakpoint</code>，然后输入 <code>objc_alloc</code> ，如下图所示：</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f3097683a7e518?w=424&h=268&f=png&s=109931" alt="image.png"> <img src="https://user-gold-cdn.xitu.io/2019/12/23/16f309768d2e6bc1?w=952&h=382&f=png&s=565114" alt="image.png"></p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f30976adf97036?w=1942&h=378&f=png&s=188236" alt="image.png"></p><p>至此，我们得到了 <code>alloc</code> 实现位于 <code>libObjc</code> 这个动态库，而刚好苹果已经开源了这部分的代码，所以我们可以在 <a href="https://opensource.apple.com/release/macos-10145.html" target="_blank" rel="noopener">苹果开源官网 最新版本 10.14.5</a> 上下载即可。最新的 <code>libObc</code> 为 756。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f309768dc0fe81?w=1312&h=48&f=png&s=6144" alt="image.png"></p><p><a name="Udab2"></a></p><h1 id="探索-libObjc-源码"><a href="#探索-libObjc-源码" class="headerlink" title="探索 libObjc 源码"></a>探索 <code>libObjc</code> 源码</h1><p>我们下载了 <code>libObjc</code> 的源码到我们的电脑上后是不能直接运行的，我们需要进行一定的配置才能实现源码追踪流程。这一块内容不在本文范围内，读者可参考 <a href="https://juejin.im/post/5d9c829df265da5ba46f49c9" target="_blank" rel="noopener">iOS_objc4-756.2 最新源码编译调试</a>。</p><p>配置好 <code>libObjc</code> 之后，我们新建一个命令行的项目，然后运行如下代码:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *myObj = [<span class="built_in">NSObject</span> alloc];</span><br></pre></td></tr></table></figure><p><a name="41cMh"></a></p><h2 id="objc-alloc"><a href="#objc-alloc" class="headerlink" title="objc_alloc"></a>objc_alloc</h2><p>然后我们直接下符号断点 <code>objc_alloc</code> ，然后一步步调试，先来到的是 <code>objc_alloc</code> </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calls [cls alloc].</span></span><br><span class="line"><span class="keyword">id</span></span><br><span class="line">objc_alloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> callAlloc(cls, <span class="literal">true</span><span class="comment">/*checkNil*/</span>, <span class="literal">false</span><span class="comment">/*allocWithZone*/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="E0Er7"></a></p><h2 id="第一次-callAlloc"><a href="#第一次-callAlloc" class="headerlink" title="第一次 callAlloc"></a>第一次 callAlloc</h2><p>然后会来到 <code>callAlloc</code> 方法，注意这里第三个参数传的是 <code>false</code> </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ALWAYS_INLINE <span class="keyword">id</span></span><br><span class="line">callAlloc(Class cls, <span class="keyword">bool</span> checkNil, <span class="keyword">bool</span> allocWithZone=<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断传入的 checkNil 是否进行判空操作</span></span><br><span class="line">    <span class="keyword">if</span> (slowpath(checkNil &amp;&amp; !cls)) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前编译环境为 OC 2.0</span></span><br><span class="line"><span class="meta">#if __OBJC2__</span></span><br><span class="line">    <span class="comment">// 当前类没有自定义的 allocWithZone</span></span><br><span class="line">    <span class="keyword">if</span> (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;</span><br><span class="line">        <span class="comment">// No alloc/allocWithZone implementation. Go straight to the allocator.</span></span><br><span class="line">        <span class="comment">// 既没有实现 alloc，也没有实现 allocWithZone 就会来到这里，下面直接进行内存开辟操作。</span></span><br><span class="line">        <span class="comment">// fixme store hasCustomAWZ in the non-meta class and </span></span><br><span class="line">        <span class="comment">// add it to canAllocFast's summary</span></span><br><span class="line">        <span class="comment">// 修复没有元类的类，用人话说就是没有继承于 NSObject</span></span><br><span class="line">        <span class="comment">// 判断当前类是否可以快速开辟内存，注意，这里永远不会被调用，因为 canAllocFast 内部</span></span><br><span class="line">        <span class="comment">// 返回的是false</span></span><br><span class="line">        <span class="keyword">if</span> (fastpath(cls-&gt;canAllocFast())) &#123;</span><br><span class="line">            <span class="comment">// No ctors, raw isa, etc. Go straight to the metal.</span></span><br><span class="line">            <span class="keyword">bool</span> dtor = cls-&gt;hasCxxDtor();</span><br><span class="line">            <span class="keyword">id</span> obj = (<span class="keyword">id</span>)calloc(<span class="number">1</span>, cls-&gt;bits.fastInstanceSize());</span><br><span class="line">            <span class="keyword">if</span> (slowpath(!obj)) <span class="keyword">return</span> callBadAllocHandler(cls);</span><br><span class="line">            obj-&gt;initInstanceIsa(cls, dtor);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Has ctor or raw isa or something. Use the slower path.</span></span><br><span class="line">            <span class="keyword">id</span> obj = class_createInstance(cls, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (slowpath(!obj)) <span class="keyword">return</span> callBadAllocHandler(cls);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// No shortcuts available.</span></span><br><span class="line">    <span class="keyword">if</span> (allocWithZone) <span class="keyword">return</span> [cls allocWithZone:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">return</span> [cls alloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="jYuXk"></a></p><h2 id="objc-rootAlloc"><a href="#objc-rootAlloc" class="headerlink" title="_objc_rootAlloc"></a>_objc_rootAlloc</h2><p>因为我们在 <code>objc_init</code>  中传入的第三个参数 <code>allocWithZone</code> 是 <code>true</code> ，并且我们的 <code>cls</code> 为 <code>NSObject</code> ，那么也就是说会这里直接来到 <code>return [cls alloc]</code> 。我们接着往下走会来到 <code>alloc</code> 方法：<br> </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">id</span>)alloc &#123;</span><br><span class="line">    <span class="keyword">return</span> _objc_rootAlloc(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们接着进入 <code>_objc_rootAlloc</code> 方法内部:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base class implementation of +alloc. cls is not nil.</span></span><br><span class="line"><span class="comment">// Calls [cls allocWithZone:nil].</span></span><br><span class="line"><span class="keyword">id</span></span><br><span class="line">_objc_rootAlloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> callAlloc(cls, <span class="literal">false</span><span class="comment">/*checkNil*/</span>, <span class="literal">true</span><span class="comment">/*allocWithZone*/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="gvdcC"></a></p><h2 id="第二次-callAlloc"><a href="#第二次-callAlloc" class="headerlink" title="第二次 callAlloc"></a>第二次 callAlloc</h2><p>是不是有点似曾相似，没错，我们第一步进入的 <code>objc_init</code> 也是调用的 <code>callAlloc</code> 方法，但是这里有两个参数是不一样的，第二个参数 <code>checkNil</code> 是否需要判空直接传的是 <code>false</code> ，站在系统角度，前面已经在第一次调用 <code>callAlloc</code>  的时候进行了判空了，所以这里没必要再次进行判空的了。第三个参数 <code>allocWithZone</code> 传的是 <code>true</code> ，关于这个方法，我查阅了苹果开发者文档，文档解释如下:</p><blockquote><p>Do not override <code>allocWithZone:</code> to include any initialization code. Instead, class-specific versions of <code>init...</code> methods.<br>This method exists for historical reasons; memory zones are no longer used by Objective-C.<br>译：不要去重载 <code>allocWithZone</code> 并在其内部填充任何初始化代码，相反的，应该在 <code>init...</code> 里面进行类的初始化操作。<br>这个方法的存在是有历史原因的，内存 <code>zone</code> 已经不再被 <code>Objective-C</code> 所使用的。</p></blockquote><p>按照苹果开发者文档的说法，其实 <code>allocWithZone</code> 本质上和 <code>alloc</code> 是没有区别的，只是在 <code>Objective-C</code> 远古时代，程序员需要使用诸如 <code>allocWithZone</code> 来优化对象的内存结构，而在当下，其实你写 <code>alloc</code> 和 <code>allocWithZone</code> 在底层是一模模一样样的。</p><p>好的，话题扯远了，我们接着再次进入到 <code>callAlloc</code> 方法内部，第二次来到 <code>callAlloc</code> 的话，在 <code>!cls-&gt;ISA()-&gt;hasCustomAWZ()</code> 这里判断 <code>cls</code> 没有自定义的 <code>allocWithZone</code> 实现，这里的判断实质上是对 <code>cls</code> 也就是 <code>object_class</code> 这一结构体内部的 <code>class_rw_t</code> 的 <code>flags</code> 与上一个宏 <code>RW_HAS_DEFAULT_AWZ</code> 。经过笔者测试，在第一次进入 <code>callAlloc</code> 方法内部的时候， <code>flags</code> 值为 1 ，然后  <code>flags</code> 与上 <code>1&lt;&lt;16</code> 结果就是 0 ，返回过去也就是 <code>false</code> ，然后在 <code>hasCustomAWZ</code> 这里取反之后，返回的就是 <code>true</code> ，然后再一取反，自然就会跳过 <code>if</code> 里面的逻辑；而第二次进入 <code>callAlloc</code> 方法内部的时候， <code>flags</code> 值是一个很大的整数，与上 <code>1&lt;&lt;16</code> 后结果并不为0 ，所以 <code>hasDefaultAWZ</code> 会返回 <code>true</code> ，那么 <code>hasCustomAWZ</code> 这里就会返回 <code>false</code> ，那么返回到 <code>callAlloc</code> 的时候自然就会进入 <code>if</code> 里面的逻辑了。</p><blockquote><p>这里插一句，在我们 OC 的类的结构中，有一个结构叫 <code>class_rw_t</code> ，有一个结构叫 <code>class_ro_t</code> 。其中 <code>class_rw_t</code> 是可以在运行时去拓展类的，包括属性，方法、协议等等，而 <code>class_ro_t</code> 则存储了成员变量，属性和方法等，不过这些是在编译时就确定了的，不能在运行时去修改。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> hasCustomAWZ() &#123;</span><br><span class="line">   <span class="keyword">return</span> ! bits.hasDefaultAWZ();</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> hasDefaultAWZ() &#123;</span><br><span class="line"><span class="keyword">return</span> data()-&gt;flags &amp; RW_HAS_DEFAULT_AWZ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们会来到 <code>canAllocFast</code> 的判断，我们继续进入该方法内部</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fastpath(cls-&gt;canAllocFast()))</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> canAllocFast() &#123;</span><br><span class="line">    assert(!isFuture());</span><br><span class="line">    <span class="keyword">return</span> bits.canAllocFast();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> canAllocFast() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果很显然，这里 <code>canAllocFast</code> 是一直返回 <code>false</code> 的，也就是说会直接来到下面的逻辑</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> obj = class_createInstance(cls, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (slowpath(!obj)) <span class="keyword">return</span> callBadAllocHandler(cls);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure><p>我们再次进入 <code>class_createInstance</code> 方法内部</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> </span><br><span class="line">class_createInstance(Class cls, size_t extraBytes)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _class_createInstanceFromZone(cls, extraBytes, <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __attribute__((always_inline)) </span><br><span class="line"><span class="keyword">id</span></span><br><span class="line">_class_createInstanceFromZone(Class cls, size_t extraBytes, <span class="keyword">void</span> *zone, </span><br><span class="line">                              <span class="keyword">bool</span> cxxConstruct = <span class="literal">true</span>, </span><br><span class="line">                              size_t *outAllocatedSize = <span class="literal">nil</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 对 cls 进行判空操作</span></span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="comment">// 断言 cls 是否实现了</span></span><br><span class="line">    assert(cls-&gt;isRealized());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read class's info bits all at once for performance</span></span><br><span class="line">    <span class="comment">// cls 是否有 C++ 的初始化构造器</span></span><br><span class="line">    <span class="keyword">bool</span> hasCxxCtor = cls-&gt;hasCxxCtor();</span><br><span class="line">    <span class="comment">// cls 是否有 C++ 的析构器</span></span><br><span class="line">    <span class="keyword">bool</span> hasCxxDtor = cls-&gt;hasCxxDtor();</span><br><span class="line">    <span class="comment">// cls 是否可以分配 Nonpointer，如果是，即代表开启了内存优化 </span></span><br><span class="line">    <span class="keyword">bool</span> fast = cls-&gt;canAllocNonpointer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里传入的 extraBytes 为0，然后获取 cls 的实例内存大小</span></span><br><span class="line">    size_t size = cls-&gt;instanceSize(extraBytes);</span><br><span class="line">    <span class="comment">// 这里 outAllocatedSize 是默认值 nil，跳过</span></span><br><span class="line">    <span class="keyword">if</span> (outAllocatedSize) *outAllocatedSize = size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">id</span> obj;</span><br><span class="line">    <span class="comment">// 这里 zone 传入的也是nil，而 fast 拿到的是 true，所以会进入这里的逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (!zone  &amp;&amp;  fast) &#123;</span><br><span class="line">        <span class="comment">// 根据 size 开辟内存</span></span><br><span class="line">        obj = (<span class="keyword">id</span>)calloc(<span class="number">1</span>, size);</span><br><span class="line">        <span class="comment">// 如果开辟失败，返回 nil</span></span><br><span class="line">        <span class="keyword">if</span> (!obj) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">// 将 cls 和是否有 C++ 析构器传入给 initInstanceIsa，实例化 isa</span></span><br><span class="line">        obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 zone 不为空，经过笔者测试，一般来说调用 alloc 不会来到这里，只有 allocWithZone</span></span><br><span class="line">        <span class="comment">// 或 copyWithZone 会来到下面的逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (zone) &#123;</span><br><span class="line">            <span class="comment">// 根据给定的 zone 和 size 开辟内存</span></span><br><span class="line">            obj = (<span class="keyword">id</span>)malloc_zone_calloc ((malloc_zone_t *)zone, <span class="number">1</span>, size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根据 size 开辟内存</span></span><br><span class="line">            obj = (<span class="keyword">id</span>)calloc(<span class="number">1</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果开辟失败，返回 nil</span></span><br><span class="line">        <span class="keyword">if</span> (!obj) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use raw pointer isa on the assumption that they might be </span></span><br><span class="line">        <span class="comment">// doing something weird with the zone or RR.</span></span><br><span class="line">        <span class="comment">// 初始化 isa</span></span><br><span class="line">        obj-&gt;initIsa(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有 C++ 初始化构造器和析构器，进行优化加速整个流程</span></span><br><span class="line">    <span class="keyword">if</span> (cxxConstruct &amp;&amp; hasCxxCtor) &#123;</span><br><span class="line">        obj = _objc_constructOrFree(obj, cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最终的结果</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们的 <code>alloc</code> 流程就探索完毕，但在这其中我们还是有一些疑问点，比如，对象的内存大小时怎么确定出来的， <code>isa</code> 是怎么初始化出来的呢，没关系，我们下一篇接着探索。这里，先给出笔者自己画的一个 <code>alloc</code> 流程图，限于笔者水平有限，有错误之处望读者指出:</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f30976af136d0d?w=1769&h=1430&f=png&s=162905" alt="image.png"><br><a name="bW4k0"></a></p><h2 id="init-简略分析"><a href="#init-简略分析" class="headerlink" title="init 简略分析"></a>init 简略分析</h2><p>分析完了 <code>alloc</code> 的流程，我们接着分析 <code>init</code> 的流程。相比于 <code>alloc</code> 来说， <code>init</code> 内部实现十分简单，先来到的是 <code>_objc_rootInit</code> ，然后就直接返回 <code>obj</code> 了。其实这里是一种抽象工厂设计模式的体现，对于 <code>NSObject</code> 自带的 <code>init</code> 方法来说，其实啥也没干，但是如果你继承于 <code>NSObject</code> 的话，然后就可以去重写 <code>initWithXXX</code> 之类的初始化方法来做一些初始化操作。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">    <span class="keyword">return</span> _objc_rootInit(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">id</span></span><br><span class="line">_objc_rootInit(<span class="keyword">id</span> obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// In practice, it will be hard to rely on this function.</span></span><br><span class="line">    <span class="comment">// Many classes do not properly chain -init calls.</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="hS9D9"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>先秦荀子的劝学中有言:</p><blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><p>我们在探索 <code>iOS</code> 底层原理的时候，应该也是抱着这样的学习态度，注意点滴的积累，从小做起，积少成多。下一篇笔者将对本文留下的两个疑问进行解答:</p><ul><li>对象初始化内存是如何分配的？</li><li>isa 是如何初始化的?</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a name=&quot;BrezX&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作为 &lt;code&gt;iOS&lt;/code&gt; 开发者，我们每天打交道最多的应该就是对象了，从面向对象设计的角度来说，对象的创建以及初始化是最基础的内容。那么，今天我们就一起来探索一下 &lt;code&gt;iOS&lt;/code&gt; 中最常用的 &lt;code&gt;alloc&lt;/code&gt; 和 &lt;code&gt;init&lt;/code&gt;  的底层是怎么实现的吧。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS 底层原理" scheme="http://leejunhui.com/categories/iOS-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="iOS" scheme="http://leejunhui.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://leejunhui.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>WWDC2012 iOS App Performance:Responsiveness 笔记</title>
    <link href="http://leejunhui.com/2019/12/10/WWDC2012-iOS-App-Performance-Responsiveness/"/>
    <id>http://leejunhui.com/2019/12/10/WWDC2012-iOS-App-Performance-Responsiveness/</id>
    <published>2019-12-10T03:55:32.000Z</published>
    <updated>2020-01-05T03:41:03.412Z</updated>
    
    <content type="html"><![CDATA[<p>如果观看过 <a href="https://developer.apple.com/videos/play/wwdc2012/235/" target="_blank" rel="noopener">WWDC 2012 Session 305 - iOS App Performance: Responsiveness</a> 可以略过本文。</p><p>首先，该篇 WWDC Session 有两个主题</p><ul><li>响应式：app 如何更快的响应用户操作</li><li>性能优化：让 app 高效的运行<a id="more"></a><h2 id="一、应用启动"><a href="#一、应用启动" class="headerlink" title="一、应用启动"></a>一、应用启动</h2></li><li>app 启动时间是第一指标</li><li>app 启动时会有一段过渡动画<ul><li>iPhone 上有 400 毫秒</li><li>iPad 上有 500 毫秒</li></ul></li><li>力争更快的启动 app</li></ul><p>iOS 系统会有一个 watchdog 来监测 app 的启动时间是否过长，根据 app 的生命周期，对应的时间阈值如下表所示：</p><table><thead><tr><th>场景</th><th>Watchdog 时间阈值</th></tr></thead><tbody><tr><td>启动 Launch</td><td>20 秒</td></tr><tr><td>重载 Resume</td><td>10 秒</td></tr><tr><td>挂起 Suspend</td><td>10 秒</td></tr><tr><td>退出 Quit</td><td>6 秒</td></tr><tr><td>后台任务 Background Task</td><td>10 分钟</td></tr></tbody></table><p>值得注意的是，如果是在 Xcode 中以 Debug 模式运行你的 app，这个 watchdog 机制是默认禁用的。也就是说在 Release 模式下才会激活这个机制。</p><h3 id="1-计算-app-的启动时间"><a href="#1-计算-app-的启动时间" class="headerlink" title="1.计算 app 的启动时间"></a>1.计算 app 的启动时间</h3><p><strong>选择一个合适的节点</strong></p><ul><li>Watchdog 会监听第一次 <code>CATranscation</code> 事务的结束<ul><li>第一次布局与渲染</li><li><code>CoreAnimation</code> 的内部方法 <code>-[UIApplication _reportAppLaunchFinshed]</code> </li></ul></li><li>用户可能关心的其它指标<ul><li>相机类 app 应该计算好快门开启的时间</li></ul></li></ul><h3 id="2-记录第一次渲染的开始和结束时间"><a href="#2-记录第一次渲染的开始和结束时间" class="headerlink" title="2.记录第一次渲染的开始和结束时间"></a>2.记录第一次渲染的开始和结束时间</h3><ul><li>在 main() 中获取渲染开始时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char **argv) &#123;</span><br><span class="line">    StartTime = CFAbsoluteTimeGetCurrent();</span><br></pre></td></tr></table></figure><ul><li>在 applicationDidFinishLaunching 中获得渲染结束时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)applicationDidFinishLaunching:(UIApplication *)app &#123;</span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;Launched in %f sec&quot;, CFAbsoluteTimeGetCurrent() - StartTime);    </span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用 GCD 的原因是在 <code>applicationDidFinishLaunching</code> 回调方法返回前，并不能确保 app 渲染完成了，所以需要使用异步的方式来在主线程上获取时间差。</p></blockquote><h3 id="3-使用-Time-Profiler-来计算第一次渲染所耗费的时间"><a href="#3-使用-Time-Profiler-来计算第一次渲染所耗费的时间" class="headerlink" title="3.使用 Time Profiler 来计算第一次渲染所耗费的时间"></a>3.使用 Time Profiler 来计算第一次渲染所耗费的时间</h3><h3 id="4-App-启动的流程"><a href="#4-App-启动的流程" class="headerlink" title="4.App 启动的流程"></a>4.App 启动的流程</h3><ul><li>链接和装载 Linking and loading</li><li>UIKit 初始化 </li><li>Application 回调</li><li>第一次 Core Animation 事务完成</li></ul><h3 id="5-App-启动总结"><a href="#5-App-启动总结" class="headerlink" title="5.App 启动总结"></a>5.App 启动总结</h3><blockquote><p>Launch is the first user interaction - it should be responsive<br>App 启动是用户的第一层交互，这个过程应该是顺滑的</p></blockquote><hr><blockquote><p>Measure launch time<br>计算启动耗费的时间</p></blockquote><hr><blockquote><p>Profile with Time Profiler<br>使用 Time Profiler 工具来调试</p></blockquote><hr><blockquote><p>Observe best practices<br>遵守最佳实践</p></blockquote><h2 id="二、性能优化策略"><a href="#二、性能优化策略" class="headerlink" title="二、性能优化策略"></a>二、性能优化策略</h2><h3 id="2-1-避免不必要的工作"><a href="#2-1-避免不必要的工作" class="headerlink" title="2.1 避免不必要的工作"></a>2.1 避免不必要的工作</h3><ul><li>对 App 进行 Profile 后，通常会揭露出 App 中一些不必要的模块</li><li>例子<ul><li>不必要的阴影和遮罩</li><li>对同一数据的多次请求</li><li>启动时过多的日志打印会耗费很多时间</li></ul></li></ul><h3 id="2-2-重用而不是重新创建"><a href="#2-2-重用而不是重新创建" class="headerlink" title="2.2 重用而不是重新创建"></a>2.2 重用而不是重新创建</h3><ul><li>特定的一些类的初始化是代价很高的<ul><li>TableView 的 cell</li><li>日期/数字 格式化器</li><li>正则表达式</li><li>SQLite 语句</li></ul></li><li>重用这些对象而不是重新创建</li></ul><h4 id="2-2-1-日期格式化-Date-Formatter"><a href="#2-2-1-日期格式化-Date-Formatter" class="headerlink" title="2.2.1 日期格式化 Date Formatter"></a>2.2.1 日期格式化 Date Formatter</h4><ul><li>使用日期格式化的大多数场景<ul><li>对于一种日期格式缓存对应的一个日期格式化器 (Date Formatter)</li><li>当收到 <code>NSLocaleDidChangeNotification</code> 通知时，让缓存失效</li></ul></li><li>设置格式和重新创建都是性能高昂的操作 </li></ul><h4 id="2-2-2-日历-Calendars"><a href="#2-2-2-日历-Calendars" class="headerlink" title="2.2.2 日历 Calendars"></a>2.2.2 日历 Calendars</h4><ul><li>每一句 <code>NSLog</code> 的调用都会创建一个新的 <code>calendar</code> 实例<ul><li>避免 <code>NSLog</code> 的过度使用</li></ul></li><li>通过调用 <code>+[NSCalendar currentCalendar]</code> 对于每个 cell 都返回一个新的实例出来<ul><li>如果重复使用的话应该保存这个实例</li></ul></li></ul><h4 id="2-2-3-SQLite-语句"><a href="#2-2-3-SQLite-语句" class="headerlink" title="2.2.3 SQLite 语句"></a>2.2.3 SQLite 语句</h4><ul><li>每一条 SQLite 语句都是一个可编译程序<ul><li>使用 <code>sqlite3_prepare</code> 将 SQL 查询语句转换为字节码</li></ul></li><li>使用绑定参数并重用语句</li></ul><h3 id="2-3-高效的开发"><a href="#2-3-高效的开发" class="headerlink" title="2.3 高效的开发"></a>2.3 高效的开发</h3><ul><li>选择合适的数据结构和算法</li><li>选择更快的算法</li></ul><h3 id="2-4-提前计算结果"><a href="#2-4-提前计算结果" class="headerlink" title="2.4 提前计算结果"></a>2.4 提前计算结果</h3><h3 id="2-5-异步加载"><a href="#2-5-异步加载" class="headerlink" title="2.5 异步加载"></a>2.5 异步加载</h3><h3 id="2-6-大量数据测试"><a href="#2-6-大量数据测试" class="headerlink" title="2.6 大量数据测试"></a>2.6 大量数据测试</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果观看过 &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2012/235/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WWDC 2012 Session 305 - iOS App Performance: Responsiveness&lt;/a&gt; 可以略过本文。&lt;/p&gt;
&lt;p&gt;首先，该篇 WWDC Session 有两个主题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;响应式：app 如何更快的响应用户操作&lt;/li&gt;
&lt;li&gt;性能优化：让 app 高效的运行
    
    </summary>
    
      <category term="WWDC 笔记" scheme="http://leejunhui.com/categories/WWDC-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="iOS" scheme="http://leejunhui.com/tags/iOS/"/>
    
      <category term="WWDC" scheme="http://leejunhui.com/tags/WWDC/"/>
    
      <category term="翻译" scheme="http://leejunhui.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS 最佳实践[译]（一）起步</title>
    <link href="http://leejunhui.com/2019/08/10/iOS-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E8%AF%91/"/>
    <id>http://leejunhui.com/2019/08/10/iOS-最佳实践-译/</id>
    <published>2019-08-10T03:07:46.000Z</published>
    <updated>2020-01-05T03:41:19.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS-最佳实践（一）起步"><a href="#iOS-最佳实践（一）起步" class="headerlink" title="iOS 最佳实践（一）起步"></a>iOS 最佳实践（一）起步</h1><h2 id="为什么整理这篇文档"><a href="#为什么整理这篇文档" class="headerlink" title="为什么整理这篇文档?"></a>为什么整理这篇文档?</h2><p>刚开始从事 iOS 开发会有一点让人心生畏惧。<code>Swift</code>和<code>Objective-C</code>并不是被广泛使用的语言，这个平台几乎所有内容都有自己特有的名称，将你所编写的代码运行到一台设备上的过程可能是很坎坷的。这份文档就是来帮助你的，不论你是开始迈出你在<code>Cocoa王国</code>中的第一步还是对于<code>以正确的方式</code>编程。下面所有的内容都仅仅是建议，所以如果你有一个很好地理由用不同的方式来实现，那就去做吧!</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>如果您正在寻找特定的内容，您可以从这里直接跳到相关部分。</p><ol><li><a href="#1">起步</a></li><li><a href>常用库</a></li><li><a href>架构</a></li><li><a href>存储</a></li><li><a href>资源</a></li><li><a href>编码风格</a></li><li><a href>安全</a></li><li><a href>诊断</a></li><li><a href>分析</a></li><li><a href>编译</a></li><li><a href>分发</a></li><li><a href>内购(IAP)</a></li><li><a href>证书</a></li></ol><h2 id="1">起步</h2><h3>人机交互指南</h3><p>如果你来自其它平台，请花一些时间来熟悉苹果的<a href="https://developer.apple.com/ios/human-interface-guidelines/" target="_blank" rel="noopener">人机交互指南</a>。iOS 的世界非常强调要有一个良好的设计，你的app也不应例外。该指南还为设计人员提供了一个关于原生UI元素、以及如 3D Touch 或 Wallet 等 app 以及图标大小的实用概述。</p><h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><p><a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">Xcode</a>是大多数iOS开发者所选择的IDE，同时也是苹果官方指定的唯一平台。除了<code>Xcode</code>外，还有一些替换方案，其中<a href="https://www.jetbrains.com/objc/" target="_blank" rel="noopener">AppCode</a>可以说是最出名的了，但除非你是经验丰富的iOS开发者，否则还是请使用<code>Xcode</code>吧。虽然它有一些缺点，但它现在确实很实用！</p><p>如需安装<code>Xcode</code>，直接在Mac的<a href="https://itunes.apple.com/us/app/xcode/id497799835" target="_blank" rel="noopener">App Store</a>上下载即可。它提供了最新的SDK和模拟器，您可以在首选项&gt;下载中安装更多的东西。</p><!-- more --><h3 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h3><p>当开始开发一个iOS项目的时候，一个常见的问题就是纯代码还是通过<code>Storyboards</code>或<code>XIB</code>文件来使用<code>Interface Builder</code>。众所周知两种方法都能完成工作。然而，这里有几点需要考虑的：</p><h4 id="为什么使用纯代码"><a href="#为什么使用纯代码" class="headerlink" title="为什么使用纯代码?"></a>为什么使用纯代码?</h4><ul><li><code>Storyboards</code>由于其复杂的XML结构，更容易发生版本冲突。这使得比纯代码更难完成合并。</li><li>纯代码更容易构造和重用视图，从而保持代码库的<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY</a>。</li><li>所有的信息都在一个地方。在<code>Interface Builder</code>中，你必须单击所有检查器才能找到您要查找的内容。</li><li><code>Storyboards</code>引入了代码和UI之间的耦合，这可能导致崩溃，例如当<code>outlet</code>或<code>Action</code>没有正确被设置时。编译器不会检测到这些问题。</li></ul><h4 id="为什么使用Storyboards"><a href="#为什么使用Storyboards" class="headerlink" title="为什么使用Storyboards?"></a>为什么使用<code>Storyboards</code>?</h4><ul><li>对于不太倾向于技术的人来说，<code>Storyboards</code>是直接为项目做出贡献的好方法。例如，调整颜色和布局约束。然而，这是需要一个可行的项目设置并且花时间学习基础知识的过程。</li><li>由于可以在不构建项目的情况下预览更改，对于迭代开发来说更有优势。</li><li>自定义字体和UI元素都是以图形化的方式展现在<code>Storyboards</code>中，当在设计时对最终的外观有一个更好的了解。</li><li>对于<a href="http://futurice.com/blog/adaptive-views-in-ios-8" target="_blank" rel="noopener">size classes</a>, Interface Builder 能将你所选择的设备提供实时布局预览，包括iPad分屏多任务处理。</li></ul><h4 id="为什么不两者兼用呢"><a href="#为什么不两者兼用呢" class="headerlink" title="为什么不两者兼用呢?"></a>为什么不两者兼用呢?</h4><p>为了两全其美，你可以采取混用的方案：首先用<code>Storyboards</code>勾勒出最初的设计，对修补和快速更改非常有用。你甚至可以邀请设计师加入到这个流程中。随着UI的成熟和可靠性变得更加重要，你将过渡到更容易维护和协作的基于代码的方式开发。</p><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>将版本控制引入项目的第一步就是要有一个正确的<code>.gitignore</code>文件。这样，不需要的文件（用户设置文件，临时文件等）将永远不会被纳入版本库。幸运的是，GitHub 已经提供了 <a href="https://github.com/github/gitignore/blob/master/Objective-C.gitignore" target="_blank" rel="noopener">OC</a> 和 <a href="https://github.com/github/gitignore/blob/master/Swift.gitignore" target="_blank" rel="noopener">Swift</a> 的<code>.gitignore</code>文件。</p><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><h4 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h4><p>如果你打算在项目中引入第三方库的话，<a href="https://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a> 提供了简单快速的集成。安装它很简单，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>初始化时，跳转到项目路径下，执行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure><p>这会自动生成一个<code>Podfile</code>文件，这个文件用来管理项目的所有依赖。在<code>Podfile</code>中添加好依赖后，执行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>执行后会安装所依赖的第三方库，并且作为工程的一部分，这个工程当然也包含了你自己的项目。由于<a href="https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control" target="_blank" rel="noopener">这里</a>和<a href="https://www.dzombak.com/blog/2014/03/including-pods-in-source-control.html" target="_blank" rel="noopener">这里</a>的原因，我们推荐将<code>Pods</code>里面的内容也提交到版本库里面，而不是在每次新的代码签出后依赖于开发人员执行<code>pod install</code>。</p><blockquote><p>这里的原因大概可以这么来解释，通过将<code>Pods</code>文件夹加入版本库。当有新的开发人员克隆版本库的时候，只需要编译运行项目，不需要运行<code>pod install</code>这种需要长时间命令</p></blockquote><p>注意从现在开始，你需要打开<code>.xcworkspace</code>文件，而不是<code>.xcproject</code>文件，否则代码将无法编译。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod update</span><br></pre></td></tr></table></figure><p>上面的命令将会更新所有的pods到<code>Podfile</code>文件上所允许的最新的版本。你可以使用<a href="http://guides.cocoapods.org/syntax/podfile.html#pod" target="_blank" rel="noopener">运算符</a>来指明你想要的版本。</p><h4 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h4><p><a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">Carthage</a> 采用<a href="http://www.infoq.com/presentations/Simple-Made-Easy" target="_blank" rel="noopener">简约而不简单</a>的方式将你所依赖的代码打包成二进制库文件，而不是以神奇地将它们以各种方式集成到你的项目中。这会大大的减少编译时间，因为你的依赖在项目开始构建的时候就已经被编译好了。<br>由于没有集中式的项目仓库，这意味任何可以编译成框架的代码库都支持开箱即用的<code>Carthage</code>。<br>要开始引入<code>Carthage</code>到你的项目中的话，请遵循<code>Carthage</code>文档中的<a href="https://github.com/Carthage/Carthage#installing-carthage" target="_blank" rel="noopener">说明</a>。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>为了避免将数以百计的源文件放置在同一个目录下，最好根据项目自身的架构设置一些文件夹结构层级。例如，你可以使用如下的划分方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─ Models</span><br><span class="line">├─ Views</span><br><span class="line">├─ Controllers (或者是ViewModels, 如果你的项目是MVVM架构)</span><br><span class="line">├─ Stores</span><br><span class="line">├─ Helpers</span><br></pre></td></tr></table></figure><p>首先，在 Xcode 的项目导航器中的项目名称目录下创建组(黄色的小文件夹)，然后，对于每个组，通过点击 Xcode 的文件检查器下的灰色文件夹小图标，来到分组对应的真实物理路径，并创建对应名称的文件夹，并与 Xcode 中的组相关联。</p><h4 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h4><p>项目伊始将所有的字符串都存储到本地化文件，不仅为翻译提供了便利，同时为快速查找字符串提供了便利。你可以在<code>build scheme</code>中加入启动参数来指定app的语言：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-AppleLanguages (Finnish)</span><br></pre></td></tr></table></figure><p>而对于更加复杂的翻译场景，如取决于数量的复数形式(例如: “1 person” vs “3 people”)，你应该使用<a href="https://developer.apple.com/library/prerelease/ios/documentation/MacOSX/Conceptual/BPInternational/StringsdictFileFormat/StringsdictFileFormat.html" target="_blank" rel="noopener">.stringsdict</a>格式文件而不是常规的格式化字符串文件。一旦你将视线转移到这个疯狂的语法上，你就拥有了一个知道如何为 <code>one</code>，<code>some</code>，<code>few</code> 和 <code>many</code> 应用复数化的强大工具，<a href="http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html" target="_blank" rel="noopener">例如在俄语和阿拉伯语中</a>。</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>保持常量的作用域尽可能的小，例如，当你只需要在一个类中使用常量的时候，那么这个常量作用域应仅限于这个类。需要在全局作用域保存的常量应当统一存放在一个地方。在<code>Swift</code>中，你可以使用枚举来定义常量然后生成<code>Constants.swift</code>文件来组织、存储和获取全局作用域的常量，这是一种非常干净的方式。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> baseURL = <span class="type">NSURL</span>(string: <span class="string">"http://www.example.org/"</span>)!</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> splineReticulatorName = <span class="string">"foobar"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> primaryColor = <span class="type">UIColor</span>(red: <span class="number">0.22</span>, green: <span class="number">0.58</span>, blue: <span class="number">0.29</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> secondaryColor = <span class="type">UIColor</span>.lightGray</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A visual way to define colours within code files is to use #colorLiteral</span></span><br><span class="line">    <span class="comment">// This syntax will present you with colour picker component right on the code line</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> tertiaryColor = #colorLiteral(red: <span class="number">0.22</span>, green: <span class="number">0.58</span>, blue: <span class="number">0.29</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你使用<code>Objective-C</code>时，将全局作用域常量存储在<code>Constant.h</code>文件中，该文件是被<code>Prefix Header</code>头文件所引用了的。<br>通过静态常量来代替预处理宏定义常量：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">CGFloat</span> const <span class="type">XYZBrandingFontSizeSmall</span> = <span class="number">12</span>.0f;</span><br><span class="line"><span class="keyword">static</span> <span class="type">NSString</span> * const <span class="type">XYZAwesomenessDeliveredNotificationName</span> = @<span class="string">"foo"</span>;</span><br></pre></td></tr></table></figure><p>静态常量是类型安全的，有着更加显式的作用域(在未定义之前，它们不能在所有导入/包含的文件中使用)，在后续开发中不能被重定义或者未定义，并且是在调试器中可用的。</p><h3 id="分支模型"><a href="#分支模型" class="headerlink" title="分支模型"></a>分支模型</h3><p>特别是在向公众发布应用程序时（例如通过 App Store），使用适当的标签将发布版本与其他分支隔离是一个好主意。此外，涉及大量提交的新特性开发工作应该在它自己的分支上完成。<a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener"><code>git-flow</code></a>是一个可以帮助你遵循这些约定的工具。它只是<code>Git</code>分支和标签命令的一个便捷的封装，但能帮助团队或个人维护一个适当的分支结构。<br>所有的开发都是基于<code>feature</code>分支(或针对较小的工作基于<code>Dev</code>分支)、基于app版本的标签的发布以及提交都要通过下列代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release finish &lt;version&gt;</span><br></pre></td></tr></table></figure><h3 id="最小的iOS兼容版本"><a href="#最小的iOS兼容版本" class="headerlink" title="最小的iOS兼容版本"></a>最小的iOS兼容版本</h3><p>尽早的决定你的项目所支持的最小iOS版本是十分有用的：明确需要基于哪个系统版本进行开发，测试以及哪些系统API可以使用可以帮助你评估工作量，并让你知道哪些是可用的，哪些是不安全的。</p><p>利用这些资源所收集的资料做出选择：</p><ul><li><p>官方第一手资源</p><ul><li><a href="https://developer.apple.com/support/app-store/" target="_blank" rel="noopener">苹果iOS设备占有率</a><br>版本渗透数据的主要统计渠道，如果可能的话，更倾向于本地化和特定领域的统计信息。</li></ul></li><li><p>第三方资源</p><ul><li><a href="http://iossupportmatrix.com/" target="_blank" rel="noopener">iOS Support Matrix</a> </li><li><a href="https://david-smith.org/iosversionstats/" target="_blank" rel="noopener">DavidSmith: iOS Version Stats</a></li><li><a href="https://mixpanel.com/trends/#report/ios_frag" target="_blank" rel="noopener">Mixpanel Trends: iOS versions</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS-最佳实践（一）起步&quot;&gt;&lt;a href=&quot;#iOS-最佳实践（一）起步&quot; class=&quot;headerlink&quot; title=&quot;iOS 最佳实践（一）起步&quot;&gt;&lt;/a&gt;iOS 最佳实践（一）起步&lt;/h1&gt;&lt;h2 id=&quot;为什么整理这篇文档&quot;&gt;&lt;a href=&quot;#为什么整理这篇文档&quot; class=&quot;headerlink&quot; title=&quot;为什么整理这篇文档?&quot;&gt;&lt;/a&gt;为什么整理这篇文档?&lt;/h2&gt;&lt;p&gt;刚开始从事 iOS 开发会有一点让人心生畏惧。&lt;code&gt;Swift&lt;/code&gt;和&lt;code&gt;Objective-C&lt;/code&gt;并不是被广泛使用的语言，这个平台几乎所有内容都有自己特有的名称，将你所编写的代码运行到一台设备上的过程可能是很坎坷的。这份文档就是来帮助你的，不论你是开始迈出你在&lt;code&gt;Cocoa王国&lt;/code&gt;中的第一步还是对于&lt;code&gt;以正确的方式&lt;/code&gt;编程。下面所有的内容都仅仅是建议，所以如果你有一个很好地理由用不同的方式来实现，那就去做吧!&lt;/p&gt;
    
    </summary>
    
      <category term="iOS最佳实践" scheme="http://leejunhui.com/categories/iOS%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="iOS" scheme="http://leejunhui.com/tags/iOS/"/>
    
      <category term="翻译" scheme="http://leejunhui.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="最佳实践" scheme="http://leejunhui.com/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>拥抱变化</title>
    <link href="http://leejunhui.com/2019/08/05/%E6%8B%A5%E6%8A%B1%E5%8F%98%E5%8C%96/"/>
    <id>http://leejunhui.com/2019/08/05/拥抱变化/</id>
    <published>2019-08-05T05:30:33.000Z</published>
    <updated>2019-08-14T13:08:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天的厚度决定明天的高度，拥抱当下的变化，做时间的朋友。</p><p>近期书单:</p><ul><li>《态度》</li><li>《见识》</li><li>《浪潮之巅》</li><li>《数学之美》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天的厚度决定明天的高度，拥抱当下的变化，做时间的朋友。&lt;/p&gt;
&lt;p&gt;近期书单:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《态度》&lt;/li&gt;
&lt;li&gt;《见识》&lt;/li&gt;
&lt;li&gt;《浪潮之巅》&lt;/li&gt;
&lt;li&gt;《数学之美》&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="感悟" scheme="http://leejunhui.com/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="拥抱变化" scheme="http://leejunhui.com/tags/%E6%8B%A5%E6%8A%B1%E5%8F%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
