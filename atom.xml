<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leejunhui&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leejunhui.com/"/>
  <updated>2019-12-23T03:33:55.707Z</updated>
  <id>http://leejunhui.com/</id>
  
  <author>
    <name>leejunhui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OC 底层原理分析对象篇之 alloc&amp;init</title>
    <link href="http://leejunhui.com/2019/12/23/alloc-init/"/>
    <id>http://leejunhui.com/2019/12/23/alloc-init/</id>
    <published>2019-12-23T03:09:18.000Z</published>
    <updated>2019-12-23T03:33:55.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OC-底层原理分析对象篇之-alloc-amp-init"><a href="#OC-底层原理分析对象篇之-alloc-amp-init" class="headerlink" title="OC 底层原理分析对象篇之 alloc&amp;init"></a>OC 底层原理分析对象篇之 alloc&amp;init</h1><p><a name="BrezX"></a></p><h1 id="alloc-amp-init-探索"><a href="#alloc-amp-init-探索" class="headerlink" title="alloc &amp; init 探索"></a>alloc &amp; init 探索</h1><p>作为 <code>iOS</code> 开发者，我们每天打交道最多的应该就是对象了，从面向对象设计的角度来说，对象的创建以及初始化是最基础的内容。那么，今天我们就一起来探索一下 <code>iOS</code> 中最常用的 <code>alloc</code> 和 <code>init</code>  的底层是怎么实现的吧。</p><p><a name="LrrLo"></a></p><h2 id="如何进行底层探索"><a href="#如何进行底层探索" class="headerlink" title="如何进行底层探索"></a>如何进行底层探索</h2><p>对于第三方开源框架来说，我们去剖析内部原理和细节是有一定的方法和套路可以掌握的。而对于 <code>iOS</code>  底层，特别是 <code>OC</code> 底层，我们可能就需要用到一些开发中不是很常用的方法。</p><p>我们这个系列主要的目的是为了进行底层探索，那么我们作为 <code>iOS</code> 开发者，需要关注应该就是从应用启动到应用被 <code>kill</code> 掉这一整个生命周期的内容。我们不妨从我们最熟悉的 <code>main</code> 函数开始，一般来说，我们在 <code>main.m</code> 文件中打一个断点，左侧的调用堆栈视图应该如下图所示:</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1576996413231-49712187-4d67-466a-8ef6-9d4560753061.png#align=left&display=inline&height=369&name=image.png&originHeight=738&originWidth=964&size=733652&status=done&style=none&width=482" alt="image.png"></p><blockquote><p>要得到这样的调用堆栈有两个注意点:</p><ul><li>需要关闭 <code>Xcode</code> 左侧 <code>Debug</code> 区域最下面的 <code>show only stack frames with debug symbols and between libraries</code></li></ul></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1576995667098-971d192d-4e30-4114-ade5-7cfd7062160f.png#align=left&display=inline&height=37&name=image.png&originHeight=74&originWidth=902&size=31589&status=done&style=none&width=451" alt="image.png"></p><blockquote><ul><li>需要增加一个 <code>_objc_init</code> 的符号端点</li></ul></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1576995762039-b844de75-3105-4957-a264-40e03721f0d5.png#align=left&display=inline&height=86&name=image.png&originHeight=172&originWidth=900&size=118926&status=done&style=none&width=450" alt="image.png"></p><p>我们通过上面的调用堆栈信息不难得出一个简单粗略的加载流程结构</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1576996997408-1ebf1e41-3aec-429b-9225-08ea1c51262d.png#align=left&display=inline&height=314&name=iOS%E7%B2%97%E7%95%A5%E6%B5%81%E7%A8%8B&originHeight=314&originWidth=783&size=0&status=done&style=none&width=783" alt="iOS粗略流程"></p><p>我们现在心中建立这么一个简单的流程结构，在后期分析底层的时候我们会回过头来梳理整个启动的流程。</p><p>接下来，让我们开始实际的探索过程。</p><p>我们直接打开 <code>Xcode</code> 新建一个 <code>Single View App</code> 工程，然后我们在 <code>ViewController.m</code> 文件中调用 <code>alloc</code> 方法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *p = [<span class="built_in">NSObject</span> alloc];</span><br></pre></td></tr></table></figure><p>我们按照常规探索源码的方式，直接按住 <code>Command</code> + <code>Control</code> 来进入到 <code>alloc</code> 内部实现，但结果并非如我们所愿，我们来到的是一个头文件，只有 <code>alloc</code> 方法的声明，并没有对应的实现。这个时候，我们会陷入深深的怀疑中，其实这个时候我们只要记住下面三种常用探索方式就能迎刃而解：</p><p><a name="E9Zl4"></a></p><h3 id="直接下代码断点"><a href="#直接下代码断点" class="headerlink" title="直接下代码断点"></a>直接下代码断点</h3><p>具体操作方式为 <code>Control</code> + <code>in</code> </p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1576997689140-5faefb7e-3b06-419e-81af-eb8ce405d8f8.png#align=left&display=inline&height=33&name=image.png&originHeight=66&originWidth=372&size=4558&status=done&style=none&width=186" alt="image.png"> 这里的 <code>in</code> 指的是左侧图片中红色部分的按钮，其实这里的操作叫做 <code>Step into instruction</code> 。我们可以来到下图这里</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1576998100260-e7385d08-0887-44a1-976f-e4e92f28b52d.png#align=left&display=inline&height=200&name=image.png&originHeight=400&originWidth=1884&size=191365&status=done&style=none&width=942" alt="image.png"></p><p>我们观察不难得出我们想要找的就是 <code>libobjc.A.dylib</code> 这个动态链接库了。</p><p><a name="NaJlI"></a></p><h3 id="打开反汇编显示"><a href="#打开反汇编显示" class="headerlink" title="打开反汇编显示"></a>打开反汇编显示</h3><p>具体操作方式为打开 <code>Debug</code> 菜单下的 <code>Debug Workflow</code> 下的 <code>Always Show Disassembly</code> </p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1577004035249-01e50500-1bec-4a7d-8b89-2d93bd88d23a.png#align=left&display=inline&height=112&name=image.png&originHeight=224&originWidth=1022&size=253989&status=done&style=none&width=511" alt="image.png"></p><p>接着我们还是下代码断点，然后一步一步调试也会来到下图这里:</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1577004749590-e15ba858-2061-4f14-9f64-b8be96c3ec6a.png#align=left&display=inline&height=192&name=image.png&originHeight=384&originWidth=1940&size=188650&status=done&style=none&width=970" alt="image.png"></p><p><a name="4Xnxg"></a></p><h3 id="下符号断点"><a href="#下符号断点" class="headerlink" title="下符号断点"></a>下符号断点</h3><p>我们先选择 <code>Symbolic Breakpoint</code>，然后输入 <code>objc_alloc</code> ，如下图所示：</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1577004913212-fc853c8f-b395-4c5f-adb0-c65c909970c9.png#align=left&display=inline&height=134&name=image.png&originHeight=268&originWidth=424&size=109931&status=done&style=none&width=212" alt="image.png"> <img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1577004960976-e55fc68e-ec73-4c21-955f-44f9c12b450c.png#align=left&display=inline&height=191&name=image.png&originHeight=382&originWidth=952&size=565114&status=done&style=none&width=476" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1577005028296-6459165b-b0e3-4326-8eb1-a73797e3e276.png#align=left&display=inline&height=189&name=image.png&originHeight=378&originWidth=1942&size=188236&status=done&style=none&width=971" alt="image.png"></p><p>至此，我们得到了 <code>alloc</code> 实现位于 <code>libObjc</code> 这个动态库，而刚好苹果已经开源了这部分的代码，所以我们可以在 <a href="https://opensource.apple.com/release/macos-10145.html" target="_blank" rel="noopener">苹果开源官网 最新版本 10.14.5</a> 上下载即可。最新的 <code>libObc</code> 为 756。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1577005271313-1e5eb2c9-3a5d-4c2f-8a24-869bbc66d528.png#align=left&display=inline&height=24&name=image.png&originHeight=48&originWidth=1312&size=6144&status=done&style=none&width=656" alt="image.png"></p><p><a name="Udab2"></a></p><h2 id="探索-libObjc-源码"><a href="#探索-libObjc-源码" class="headerlink" title="探索 libObjc 源码"></a>探索 <code>libObjc</code> 源码</h2><p>我们下载了 <code>libObjc</code> 的源码到我们的电脑上后是不能直接运行的，我们需要进行一定的配置才能实现源码追踪流程。这一块内容不在本文范围内，读者可参考 <a href="https://juejin.im/post/5d9c829df265da5ba46f49c9" target="_blank" rel="noopener">iOS_objc4-756.2 最新源码编译调试</a>。</p><p>配置好 <code>libObjc</code> 之后，我们新建一个命令行的项目，然后运行如下代码:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *myObj = [<span class="built_in">NSObject</span> alloc];</span><br></pre></td></tr></table></figure><p><a name="41cMh"></a></p><h3 id="objc-alloc"><a href="#objc-alloc" class="headerlink" title="objc_alloc"></a>objc_alloc</h3><p>然后我们直接下符号断点 <code>objc_alloc</code> ，然后一步步调试，先来到的是 <code>objc_alloc</code> </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calls [cls alloc].</span></span><br><span class="line"><span class="keyword">id</span></span><br><span class="line">objc_alloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> callAlloc(cls, <span class="literal">true</span><span class="comment">/*checkNil*/</span>, <span class="literal">false</span><span class="comment">/*allocWithZone*/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="E0Er7"></a></p><h3 id="第一次-callAlloc"><a href="#第一次-callAlloc" class="headerlink" title="第一次 callAlloc"></a>第一次 callAlloc</h3><p>然后会来到 <code>callAlloc</code> 方法，注意这里第三个参数传的是 <code>false</code> </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ALWAYS_INLINE <span class="keyword">id</span></span><br><span class="line">callAlloc(Class cls, <span class="keyword">bool</span> checkNil, <span class="keyword">bool</span> allocWithZone=<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断传入的 checkNil 是否进行判空操作</span></span><br><span class="line">    <span class="keyword">if</span> (slowpath(checkNil &amp;&amp; !cls)) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前编译环境为 OC 2.0</span></span><br><span class="line"><span class="meta">#if __OBJC2__</span></span><br><span class="line">    <span class="comment">// 当前类没有自定义的 allocWithZone</span></span><br><span class="line">    <span class="keyword">if</span> (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;</span><br><span class="line">        <span class="comment">// No alloc/allocWithZone implementation. Go straight to the allocator.</span></span><br><span class="line">        <span class="comment">// 既没有实现 alloc，也没有实现 allocWithZone 就会来到这里，下面直接进行内存开辟操作。</span></span><br><span class="line">        <span class="comment">// fixme store hasCustomAWZ in the non-meta class and </span></span><br><span class="line">        <span class="comment">// add it to canAllocFast's summary</span></span><br><span class="line">        <span class="comment">// 修复没有元类的类，用人话说就是没有继承于 NSObject</span></span><br><span class="line">        <span class="comment">// 判断当前类是否可以快速开辟内存，注意，这里永远不会被调用，因为 canAllocFast 内部</span></span><br><span class="line">        <span class="comment">// 返回的是false</span></span><br><span class="line">        <span class="keyword">if</span> (fastpath(cls-&gt;canAllocFast())) &#123;</span><br><span class="line">            <span class="comment">// No ctors, raw isa, etc. Go straight to the metal.</span></span><br><span class="line">            <span class="keyword">bool</span> dtor = cls-&gt;hasCxxDtor();</span><br><span class="line">            <span class="keyword">id</span> obj = (<span class="keyword">id</span>)calloc(<span class="number">1</span>, cls-&gt;bits.fastInstanceSize());</span><br><span class="line">            <span class="keyword">if</span> (slowpath(!obj)) <span class="keyword">return</span> callBadAllocHandler(cls);</span><br><span class="line">            obj-&gt;initInstanceIsa(cls, dtor);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Has ctor or raw isa or something. Use the slower path.</span></span><br><span class="line">            <span class="keyword">id</span> obj = class_createInstance(cls, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (slowpath(!obj)) <span class="keyword">return</span> callBadAllocHandler(cls);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// No shortcuts available.</span></span><br><span class="line">    <span class="keyword">if</span> (allocWithZone) <span class="keyword">return</span> [cls allocWithZone:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">return</span> [cls alloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="jYuXk"></a></p><h3 id="objc-rootAlloc"><a href="#objc-rootAlloc" class="headerlink" title="_objc_rootAlloc"></a>_objc_rootAlloc</h3><p>因为我们在 <code>objc_init</code>  中传入的第三个参数 <code>allocWithZone</code> 是 <code>true</code> ，并且我们的 <code>cls</code> 为 <code>NSObject</code> ，那么也就是说会这里直接来到 <code>return [cls alloc]</code> 。我们接着往下走会来到 <code>alloc</code> 方法：<br> </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">id</span>)alloc &#123;</span><br><span class="line">    <span class="keyword">return</span> _objc_rootAlloc(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们接着进入 <code>_objc_rootAlloc</code> 方法内部:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base class implementation of +alloc. cls is not nil.</span></span><br><span class="line"><span class="comment">// Calls [cls allocWithZone:nil].</span></span><br><span class="line"><span class="keyword">id</span></span><br><span class="line">_objc_rootAlloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> callAlloc(cls, <span class="literal">false</span><span class="comment">/*checkNil*/</span>, <span class="literal">true</span><span class="comment">/*allocWithZone*/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="gvdcC"></a></p><h3 id="第二次-callAlloc"><a href="#第二次-callAlloc" class="headerlink" title="第二次 callAlloc"></a>第二次 callAlloc</h3><p>是不是有点似曾相似，没错，我们第一步进入的 <code>objc_init</code> 也是调用的 <code>callAlloc</code> 方法，但是这里有两个参数是不一样的，第二个参数 <code>checkNil</code> 是否需要判空直接传的是 <code>false</code> ，站在系统角度，前面已经在第一次调用 <code>callAlloc</code>  的时候进行了判空了，所以这里没必要再次进行判空的了。第三个参数 <code>allocWithZone</code> 传的是 <code>true</code> ，关于这个方法，我查阅了苹果开发者文档，文档解释如下:</p><blockquote><p>Do not override <code>allocWithZone:</code> to include any initialization code. Instead, class-specific versions of <code>init...</code> methods.<br>This method exists for historical reasons; memory zones are no longer used by Objective-C.<br>译：不要去重载 <code>allocWithZone</code> 并在其内部填充任何初始化代码，相反的，应该在 <code>init...</code> 里面进行类的初始化操作。<br>这个方法的存在是有历史原因的，内存 <code>zone</code> 已经不再被 <code>Objective-C</code> 所使用的。</p></blockquote><p>按照苹果开发者文档的说法，其实 <code>allocWithZone</code> 本质上和 <code>alloc</code> 是没有区别的，只是在 <code>Objective-C</code> 远古时代，程序员需要使用诸如 <code>allocWithZone</code> 来优化对象的内存结构，而在当下，其实你写 <code>alloc</code> 和 <code>allocWithZone</code> 在底层是一模模一样样的。</p><p>好的，话题扯远了，我们接着再次进入到 <code>callAlloc</code> 方法内部，第二次来到 <code>callAlloc</code> 的话，在 <code>!cls-&gt;ISA()-&gt;hasCustomAWZ()</code> 这里判断 <code>cls</code> 没有自定义的 <code>allocWithZone</code> 实现，这里的判断实质上是对 <code>cls</code> 也就是 <code>object_class</code> 这一结构体内部的 <code>class_rw_t</code> 的 <code>flags</code> 与上一个宏 <code>RW_HAS_DEFAULT_AWZ</code> 。经过笔者测试，在第一次进入 <code>callAlloc</code> 方法内部的时候， <code>flags</code> 值为 1 ，然后  <code>flags</code> 与上 <code>1&lt;&lt;16</code> 结果就是 0 ，返回过去也就是 <code>false</code> ，然后在 <code>hasCustomAWZ</code> 这里取反之后，返回的就是 <code>true</code> ，然后再一取反，自然就会跳过 <code>if</code> 里面的逻辑；而第二次进入 <code>callAlloc</code> 方法内部的时候， <code>flags</code> 值是一个很大的整数，与上 <code>1&lt;&lt;16</code> 后结果并不为0 ，所以 <code>hasDefaultAWZ</code> 会返回 <code>true</code> ，那么 <code>hasCustomAWZ</code> 这里就会返回 <code>false</code> ，那么返回到 <code>callAlloc</code> 的时候自然就会进入 <code>if</code> 里面的逻辑了。</p><blockquote><p>这里插一句，在我们 OC 的类的结构中，有一个结构叫 <code>class_rw_t</code> ，有一个结构叫 <code>class_ro_t</code> 。其中 <code>class_rw_t</code> 是可以在运行时去拓展类的，包括属性，方法、协议等等，而 <code>class_ro_t</code> 则存储了成员变量，属性和方法等，不过这些是在编译时就确定了的，不能在运行时去修改。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> hasCustomAWZ() &#123;</span><br><span class="line">   <span class="keyword">return</span> ! bits.hasDefaultAWZ();</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> hasDefaultAWZ() &#123;</span><br><span class="line"><span class="keyword">return</span> data()-&gt;flags &amp; RW_HAS_DEFAULT_AWZ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们会来到 <code>canAllocFast</code> 的判断，我们继续进入该方法内部</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fastpath(cls-&gt;canAllocFast()))</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> canAllocFast() &#123;</span><br><span class="line">    assert(!isFuture());</span><br><span class="line">    <span class="keyword">return</span> bits.canAllocFast();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> canAllocFast() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果很显然，这里 <code>canAllocFast</code> 是一直返回 <code>false</code> 的，也就是说会直接来到下面的逻辑</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> obj = class_createInstance(cls, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (slowpath(!obj)) <span class="keyword">return</span> callBadAllocHandler(cls);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure><p>我们再次进入 <code>class_createInstance</code> 方法内部</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> </span><br><span class="line">class_createInstance(Class cls, size_t extraBytes)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _class_createInstanceFromZone(cls, extraBytes, <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __attribute__((always_inline)) </span><br><span class="line"><span class="keyword">id</span></span><br><span class="line">_class_createInstanceFromZone(Class cls, size_t extraBytes, <span class="keyword">void</span> *zone, </span><br><span class="line">                              <span class="keyword">bool</span> cxxConstruct = <span class="literal">true</span>, </span><br><span class="line">                              size_t *outAllocatedSize = <span class="literal">nil</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 对 cls 进行判空操作</span></span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="comment">// 断言 cls 是否实现了</span></span><br><span class="line">    assert(cls-&gt;isRealized());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read class's info bits all at once for performance</span></span><br><span class="line">    <span class="comment">// cls 是否有 C++ 的初始化构造器</span></span><br><span class="line">    <span class="keyword">bool</span> hasCxxCtor = cls-&gt;hasCxxCtor();</span><br><span class="line">    <span class="comment">// cls 是否有 C++ 的析构器</span></span><br><span class="line">    <span class="keyword">bool</span> hasCxxDtor = cls-&gt;hasCxxDtor();</span><br><span class="line">    <span class="comment">// cls 是否可以分配 Nonpointer，如果是，即代表开启了内存优化 </span></span><br><span class="line">    <span class="keyword">bool</span> fast = cls-&gt;canAllocNonpointer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里传入的 extraBytes 为0，然后获取 cls 的实例内存大小</span></span><br><span class="line">    size_t size = cls-&gt;instanceSize(extraBytes);</span><br><span class="line">    <span class="comment">// 这里 outAllocatedSize 是默认值 nil，跳过</span></span><br><span class="line">    <span class="keyword">if</span> (outAllocatedSize) *outAllocatedSize = size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">id</span> obj;</span><br><span class="line">    <span class="comment">// 这里 zone 传入的也是nil，而 fast 拿到的是 true，所以会进入这里的逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (!zone  &amp;&amp;  fast) &#123;</span><br><span class="line">        <span class="comment">// 根据 size 开辟内存</span></span><br><span class="line">        obj = (<span class="keyword">id</span>)calloc(<span class="number">1</span>, size);</span><br><span class="line">        <span class="comment">// 如果开辟失败，返回 nil</span></span><br><span class="line">        <span class="keyword">if</span> (!obj) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">// 将 cls 和是否有 C++ 析构器传入给 initInstanceIsa，实例化 isa</span></span><br><span class="line">        obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 zone 不为空，经过笔者测试，一般来说调用 alloc 不会来到这里，只有 allocWithZone</span></span><br><span class="line">        <span class="comment">// 或 copyWithZone 会来到下面的逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (zone) &#123;</span><br><span class="line">            <span class="comment">// 根据给定的 zone 和 size 开辟内存</span></span><br><span class="line">            obj = (<span class="keyword">id</span>)malloc_zone_calloc ((malloc_zone_t *)zone, <span class="number">1</span>, size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根据 size 开辟内存</span></span><br><span class="line">            obj = (<span class="keyword">id</span>)calloc(<span class="number">1</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果开辟失败，返回 nil</span></span><br><span class="line">        <span class="keyword">if</span> (!obj) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use raw pointer isa on the assumption that they might be </span></span><br><span class="line">        <span class="comment">// doing something weird with the zone or RR.</span></span><br><span class="line">        <span class="comment">// 初始化 isa</span></span><br><span class="line">        obj-&gt;initIsa(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有 C++ 初始化构造器和析构器，进行优化加速整个流程</span></span><br><span class="line">    <span class="keyword">if</span> (cxxConstruct &amp;&amp; hasCxxCtor) &#123;</span><br><span class="line">        obj = _objc_constructOrFree(obj, cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最终的结果</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们的 <code>alloc</code> 流程就探索完毕，但在这其中我们还是有一些疑问点，比如，对象的内存大小时怎么确定出来的， <code>isa</code> 是怎么初始化出来的呢，没关系，我们下一篇接着探索。这里，先给出笔者自己画的一个 <code>alloc</code> 流程图，限于笔者水平有限，有错误之处望读者指出:</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/225346/1577067508691-e125c2a2-0a62-4ff3-b0b6-920682cc1a48.png#align=left&display=inline&height=1430&name=image.png&originHeight=1430&originWidth=1769&size=162905&status=done&style=none&width=1769" alt="image.png"><br><a name="bW4k0"></a></p><h3 id="init-简略分析"><a href="#init-简略分析" class="headerlink" title="init 简略分析"></a>init 简略分析</h3><p>分析完了 <code>alloc</code> 的流程，我们接着分析 <code>init</code> 的流程。相比于 <code>alloc</code> 来说， <code>init</code> 内部实现十分简单，先来到的是 <code>_objc_rootInit</code> ，然后就直接返回 <code>obj</code> 了。其实这里是一种抽象工厂设计模式的体现，对于 <code>NSObject</code> 自带的 <code>init</code> 方法来说，其实啥也没干，但是如果你继承于 <code>NSObject</code> 的话，然后就可以去重写 <code>initWithXXX</code> 之类的初始化方法来做一些初始化操作。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">    <span class="keyword">return</span> _objc_rootInit(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">id</span></span><br><span class="line">_objc_rootInit(<span class="keyword">id</span> obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// In practice, it will be hard to rely on this function.</span></span><br><span class="line">    <span class="comment">// Many classes do not properly chain -init calls.</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="hS9D9"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>先秦荀子的劝学中有言:</p><blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。</p></blockquote><p>我们在探索 <code>iOS</code> 底层原理的时候，应该也是抱着这样的学习态度，注意点滴的积累，从小做起，积少成多。下一篇笔者将对本文留下的两个疑问进行解答:</p><ul><li>对象初始化内存是如何分配的？</li><li>isa 是如何初始化的?</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OC-底层原理分析对象篇之-alloc-amp-init&quot;&gt;&lt;a href=&quot;#OC-底层原理分析对象篇之-alloc-amp-init&quot; class=&quot;headerlink&quot; title=&quot;OC 底层原理分析对象篇之 alloc&amp;amp;init&quot;&gt;&lt;/a&gt;OC
      
    
    </summary>
    
      <category term="iOS底层原理" scheme="http://leejunhui.com/categories/iOS%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="iOS" scheme="http://leejunhui.com/tags/iOS/"/>
    
      <category term="OC" scheme="http://leejunhui.com/tags/OC/"/>
    
      <category term="alloc" scheme="http://leejunhui.com/tags/alloc/"/>
    
  </entry>
  
  <entry>
    <title>WWDC2012 iOS App Performance:Responsiveness 笔记</title>
    <link href="http://leejunhui.com/2019/12/10/WWDC2012-iOS-App-Performance-Responsiveness/"/>
    <id>http://leejunhui.com/2019/12/10/WWDC2012-iOS-App-Performance-Responsiveness/</id>
    <published>2019-12-10T03:55:32.000Z</published>
    <updated>2019-12-10T04:42:32.708Z</updated>
    
    <content type="html"><![CDATA[<p>如果观看过 <a href="https://developer.apple.com/videos/play/wwdc2012/235/" target="_blank" rel="noopener">WWDC 2012 Session 305 - iOS App Performance: Responsiveness</a> 可以略过本文。</p><p>首先，该篇 WWDC Session 有两个主题</p><ul><li>响应式：app 如何更快的响应用户操作</li><li>性能优化：让 app 高效的运行</li></ul><h2 id="一、应用启动"><a href="#一、应用启动" class="headerlink" title="一、应用启动"></a>一、应用启动</h2><ul><li>app 启动时间是第一指标</li><li>app 启动时会有一段过渡动画<ul><li>iPhone 上有 400 毫秒</li><li>iPad 上有 500 毫秒</li></ul></li><li>力争更快的启动 app</li></ul><p>iOS 系统会有一个 watchdog 来监测 app 的启动时间是否过长，根据 app 的生命周期，对应的时间阈值如下表所示：</p><table><thead><tr><th>场景</th><th>Watchdog 时间阈值</th></tr></thead><tbody><tr><td>启动 Launch</td><td>20 秒</td></tr><tr><td>重载 Resume</td><td>10 秒</td></tr><tr><td>挂起 Suspend</td><td>10 秒</td></tr><tr><td>退出 Quit</td><td>6 秒</td></tr><tr><td>后台任务 Background Task</td><td>10 分钟</td></tr></tbody></table><p>值得注意的是，如果是在 Xcode 中以 Debug 模式运行你的 app，这个 watchdog 机制是默认禁用的。也就是说在 Release 模式下才会激活这个机制。</p><a id="more"></a><h3 id="1-计算-app-的启动时间"><a href="#1-计算-app-的启动时间" class="headerlink" title="1.计算 app 的启动时间"></a>1.计算 app 的启动时间</h3><p><strong>选择一个合适的节点</strong></p><ul><li>Watchdog 会监听第一次 <code>CATranscation</code> 事务的结束<ul><li>第一次布局与渲染</li><li><code>CoreAnimation</code> 的内部方法 <code>-[UIApplication _reportAppLaunchFinshed]</code> </li></ul></li><li>用户可能关心的其它指标<ul><li>相机类 app 应该计算好快门开启的时间</li></ul></li></ul><h3 id="2-记录第一次渲染的开始和结束时间"><a href="#2-记录第一次渲染的开始和结束时间" class="headerlink" title="2.记录第一次渲染的开始和结束时间"></a>2.记录第一次渲染的开始和结束时间</h3><ul><li>在 main() 中获取渲染开始时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char **argv) &#123;</span><br><span class="line">    StartTime = CFAbsoluteTimeGetCurrent();</span><br></pre></td></tr></table></figure><ul><li>在 applicationDidFinishLaunching 中获得渲染结束时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)applicationDidFinishLaunching:(UIApplication *)app &#123;</span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;Launched in %f sec&quot;, CFAbsoluteTimeGetCurrent() - StartTime);    </span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用 GCD 的原因是在 <code>applicationDidFinishLaunching</code> 回调方法返回前，并不能确保 app 渲染完成了，所以需要使用异步的方式来在主线程上获取时间差。</p></blockquote><h3 id="3-使用-Time-Profiler-来计算第一次渲染所耗费的时间"><a href="#3-使用-Time-Profiler-来计算第一次渲染所耗费的时间" class="headerlink" title="3.使用 Time Profiler 来计算第一次渲染所耗费的时间"></a>3.使用 Time Profiler 来计算第一次渲染所耗费的时间</h3><h3 id="4-App-启动的流程"><a href="#4-App-启动的流程" class="headerlink" title="4.App 启动的流程"></a>4.App 启动的流程</h3><ul><li>链接和装载 Linking and loading</li><li>UIKit 初始化 </li><li>Application 回调</li><li>第一次 Core Animation 事务完成</li></ul><h3 id="5-App-启动总结"><a href="#5-App-启动总结" class="headerlink" title="5.App 启动总结"></a>5.App 启动总结</h3><blockquote><p>Launch is the first user interaction - it should be responsive<br>App 启动是用户的第一层交互，这个过程应该是顺滑的</p></blockquote><hr><blockquote><p>Measure launch time<br>计算启动耗费的时间</p></blockquote><hr><blockquote><p>Profile with Time Profiler<br>使用 Time Profiler 工具来调试</p></blockquote><hr><blockquote><p>Observe best practices<br>遵守最佳实践</p></blockquote><h2 id="二、性能优化策略"><a href="#二、性能优化策略" class="headerlink" title="二、性能优化策略"></a>二、性能优化策略</h2><h3 id="2-1-避免不必要的工作"><a href="#2-1-避免不必要的工作" class="headerlink" title="2.1 避免不必要的工作"></a>2.1 避免不必要的工作</h3><ul><li>对 App 进行 Profile 后，通常会揭露出 App 中一些不必要的模块</li><li>例子<ul><li>不必要的阴影和遮罩</li><li>对同一数据的多次请求</li><li>启动时过多的日志打印会耗费很多时间</li></ul></li></ul><h3 id="2-2-重用而不是重新创建"><a href="#2-2-重用而不是重新创建" class="headerlink" title="2.2 重用而不是重新创建"></a>2.2 重用而不是重新创建</h3><ul><li>特定的一些类的初始化是代价很高的<ul><li>TableView 的 cell</li><li>日期/数字 格式化器</li><li>正则表达式</li><li>SQLite 语句</li></ul></li><li>重用这些对象而不是重新创建</li></ul><h4 id="2-2-1-日期格式化-Date-Formatter"><a href="#2-2-1-日期格式化-Date-Formatter" class="headerlink" title="2.2.1 日期格式化 Date Formatter"></a>2.2.1 日期格式化 Date Formatter</h4><ul><li>使用日期格式化的大多数场景<ul><li>对于一种日期格式缓存对应的一个日期格式化器 (Date Formatter)</li><li>当收到 <code>NSLocaleDidChangeNotification</code> 通知时，让缓存失效</li></ul></li><li>设置格式和重新创建都是性能高昂的操作 </li></ul><h4 id="2-2-2-日历-Calendars"><a href="#2-2-2-日历-Calendars" class="headerlink" title="2.2.2 日历 Calendars"></a>2.2.2 日历 Calendars</h4><ul><li>每一句 <code>NSLog</code> 的调用都会创建一个新的 <code>calendar</code> 实例<ul><li>避免 <code>NSLog</code> 的过度使用</li></ul></li><li>通过调用 <code>+[NSCalendar currentCalendar]</code> 对于每个 cell 都返回一个新的实例出来<ul><li>如果重复使用的话应该保存这个实例</li></ul></li></ul><h4 id="2-2-3-SQLite-语句"><a href="#2-2-3-SQLite-语句" class="headerlink" title="2.2.3 SQLite 语句"></a>2.2.3 SQLite 语句</h4><ul><li>每一条 SQLite 语句都是一个可编译程序<ul><li>使用 <code>sqlite3_prepare</code> 将 SQL 查询语句转换为字节码</li></ul></li><li>使用绑定参数并重用语句</li></ul><h3 id="2-3-高效的开发"><a href="#2-3-高效的开发" class="headerlink" title="2.3 高效的开发"></a>2.3 高效的开发</h3><ul><li>选择合适的数据结构和算法</li><li>选择更快的算法</li></ul><h3 id="2-4-提前计算结果"><a href="#2-4-提前计算结果" class="headerlink" title="2.4 提前计算结果"></a>2.4 提前计算结果</h3><h3 id="2-5-异步加载"><a href="#2-5-异步加载" class="headerlink" title="2.5 异步加载"></a>2.5 异步加载</h3><h3 id="2-6-大量数据测试"><a href="#2-6-大量数据测试" class="headerlink" title="2.6 大量数据测试"></a>2.6 大量数据测试</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果观看过 &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2012/235/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WWDC 2012 Session 305 - iOS App Performance: Responsiveness&lt;/a&gt; 可以略过本文。&lt;/p&gt;
&lt;p&gt;首先，该篇 WWDC Session 有两个主题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;响应式：app 如何更快的响应用户操作&lt;/li&gt;
&lt;li&gt;性能优化：让 app 高效的运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一、应用启动&quot;&gt;&lt;a href=&quot;#一、应用启动&quot; class=&quot;headerlink&quot; title=&quot;一、应用启动&quot;&gt;&lt;/a&gt;一、应用启动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;app 启动时间是第一指标&lt;/li&gt;
&lt;li&gt;app 启动时会有一段过渡动画&lt;ul&gt;
&lt;li&gt;iPhone 上有 400 毫秒&lt;/li&gt;
&lt;li&gt;iPad 上有 500 毫秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;力争更快的启动 app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iOS 系统会有一个 watchdog 来监测 app 的启动时间是否过长，根据 app 的生命周期，对应的时间阈值如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;th&gt;Watchdog 时间阈值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;启动 Launch&lt;/td&gt;
&lt;td&gt;20 秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;重载 Resume&lt;/td&gt;
&lt;td&gt;10 秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;挂起 Suspend&lt;/td&gt;
&lt;td&gt;10 秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;退出 Quit&lt;/td&gt;
&lt;td&gt;6 秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;后台任务 Background Task&lt;/td&gt;
&lt;td&gt;10 分钟&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;值得注意的是，如果是在 Xcode 中以 Debug 模式运行你的 app，这个 watchdog 机制是默认禁用的。也就是说在 Release 模式下才会激活这个机制。&lt;/p&gt;
    
    </summary>
    
      <category term="WWDC 笔记" scheme="http://leejunhui.com/categories/WWDC-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="iOS" scheme="http://leejunhui.com/tags/iOS/"/>
    
      <category term="WWDC" scheme="http://leejunhui.com/tags/WWDC/"/>
    
      <category term="翻译" scheme="http://leejunhui.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS 最佳实践[译]（一）起步</title>
    <link href="http://leejunhui.com/2019/08/10/iOS-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E8%AF%91/"/>
    <id>http://leejunhui.com/2019/08/10/iOS-最佳实践-译/</id>
    <published>2019-08-10T03:07:46.000Z</published>
    <updated>2019-12-10T04:36:23.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS-最佳实践（一）起步"><a href="#iOS-最佳实践（一）起步" class="headerlink" title="iOS 最佳实践（一）起步"></a>iOS 最佳实践（一）起步</h1><h2 id="为什么整理这篇文档"><a href="#为什么整理这篇文档" class="headerlink" title="为什么整理这篇文档?"></a>为什么整理这篇文档?</h2><p>刚开始从事 iOS 开发会有一点让人心生畏惧。<code>Swift</code>和<code>Objective-C</code>并不是被广泛使用的语言，这个平台几乎所有内容都有自己特有的名称，将你所编写的代码运行到一台设备上的过程可能是很坎坷的。这份文档就是来帮助你的，不论你是开始迈出你在<code>Cocoa王国</code>中的第一步还是对于<code>以正确的方式</code>编程。下面所有的内容都仅仅是建议，所以如果你有一个很好地理由用不同的方式来实现，那就去做吧!</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>如果您正在寻找特定的内容，您可以从这里直接跳到相关部分。</p><ol><li><a href="#1">起步</a></li><li><a href>常用库</a></li><li><a href>架构</a></li><li><a href>存储</a></li><li><a href>资源</a></li><li><a href>编码风格</a></li><li><a href>安全</a></li><li><a href>诊断</a></li><li><a href>分析</a></li><li><a href>编译</a></li><li><a href>分发</a></li><li><a href>内购(IAP)</a></li><li><a href>证书</a></li></ol><h2 id="1">起步</h2><h3>人机交互指南</h3><p>如果你来自其它平台，请花一些时间来熟悉苹果的<a href="https://developer.apple.com/ios/human-interface-guidelines/" target="_blank" rel="noopener">人机交互指南</a>。iOS 的世界非常强调要有一个良好的设计，你的app也不应例外。该指南还为设计人员提供了一个关于原生UI元素、以及如 3D Touch 或 Wallet 等 app 以及图标大小的实用概述。</p><h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><p><a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">Xcode</a>是大多数iOS开发者所选择的IDE，同时也是苹果官方指定的唯一平台。除了<code>Xcode</code>外，还有一些替换方案，其中<a href="https://www.jetbrains.com/objc/" target="_blank" rel="noopener">AppCode</a>可以说是最出名的了，但除非你是经验丰富的iOS开发者，否则还是请使用<code>Xcode</code>吧。虽然它有一些缺点，但它现在确实很实用！</p><p>如需安装<code>Xcode</code>，直接在Mac的<a href="https://itunes.apple.com/us/app/xcode/id497799835" target="_blank" rel="noopener">App Store</a>上下载即可。它提供了最新的SDK和模拟器，您可以在首选项&gt;下载中安装更多的东西。</p><a id="more"></a><h3 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h3><p>当开始开发一个iOS项目的时候，一个常见的问题就是纯代码还是通过<code>Storyboards</code>或<code>XIB</code>文件来使用<code>Interface Builder</code>。众所周知两种方法都能完成工作。然而，这里有几点需要考虑的：</p><h4 id="为什么使用纯代码"><a href="#为什么使用纯代码" class="headerlink" title="为什么使用纯代码?"></a>为什么使用纯代码?</h4><ul><li><code>Storyboards</code>由于其复杂的XML结构，更容易发生版本冲突。这使得比纯代码更难完成合并。</li><li>纯代码更容易构造和重用视图，从而保持代码库的<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY</a>。</li><li>所有的信息都在一个地方。在<code>Interface Builder</code>中，你必须单击所有检查器才能找到您要查找的内容。</li><li><code>Storyboards</code>引入了代码和UI之间的耦合，这可能导致崩溃，例如当<code>outlet</code>或<code>Action</code>没有正确被设置时。编译器不会检测到这些问题。</li></ul><h4 id="为什么使用Storyboards"><a href="#为什么使用Storyboards" class="headerlink" title="为什么使用Storyboards?"></a>为什么使用<code>Storyboards</code>?</h4><ul><li>对于不太倾向于技术的人来说，<code>Storyboards</code>是直接为项目做出贡献的好方法。例如，调整颜色和布局约束。然而，这是需要一个可行的项目设置并且花时间学习基础知识的过程。</li><li>由于可以在不构建项目的情况下预览更改，对于迭代开发来说更有优势。</li><li>自定义字体和UI元素都是以图形化的方式展现在<code>Storyboards</code>中，当在设计时对最终的外观有一个更好的了解。</li><li>对于<a href="http://futurice.com/blog/adaptive-views-in-ios-8" target="_blank" rel="noopener">size classes</a>, Interface Builder 能将你所选择的设备提供实时布局预览，包括iPad分屏多任务处理。</li></ul><h4 id="为什么不两者兼用呢"><a href="#为什么不两者兼用呢" class="headerlink" title="为什么不两者兼用呢?"></a>为什么不两者兼用呢?</h4><p>为了两全其美，你可以采取混用的方案：首先用<code>Storyboards</code>勾勒出最初的设计，对修补和快速更改非常有用。你甚至可以邀请设计师加入到这个流程中。随着UI的成熟和可靠性变得更加重要，你将过渡到更容易维护和协作的基于代码的方式开发。</p><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>将版本控制引入项目的第一步就是要有一个正确的<code>.gitignore</code>文件。这样，不需要的文件（用户设置文件，临时文件等）将永远不会被纳入版本库。幸运的是，GitHub 已经提供了 <a href="https://github.com/github/gitignore/blob/master/Objective-C.gitignore" target="_blank" rel="noopener">OC</a> 和 <a href="https://github.com/github/gitignore/blob/master/Swift.gitignore" target="_blank" rel="noopener">Swift</a> 的<code>.gitignore</code>文件。</p><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><h4 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h4><p>如果你打算在项目中引入第三方库的话，<a href="https://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a> 提供了简单快速的集成。安装它很简单，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>初始化时，跳转到项目路径下，执行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure><p>这会自动生成一个<code>Podfile</code>文件，这个文件用来管理项目的所有依赖。在<code>Podfile</code>中添加好依赖后，执行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>执行后会安装所依赖的第三方库，并且作为工程的一部分，这个工程当然也包含了你自己的项目。由于<a href="https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control" target="_blank" rel="noopener">这里</a>和<a href="https://www.dzombak.com/blog/2014/03/including-pods-in-source-control.html" target="_blank" rel="noopener">这里</a>的原因，我们推荐将<code>Pods</code>里面的内容也提交到版本库里面，而不是在每次新的代码签出后依赖于开发人员执行<code>pod install</code>。</p><blockquote><p>这里的原因大概可以这么来解释，通过将<code>Pods</code>文件夹加入版本库。当有新的开发人员克隆版本库的时候，只需要编译运行项目，不需要运行<code>pod install</code>这种需要长时间命令</p></blockquote><p>注意从现在开始，你需要打开<code>.xcworkspace</code>文件，而不是<code>.xcproject</code>文件，否则代码将无法编译。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod update</span><br></pre></td></tr></table></figure><p>上面的命令将会更新所有的pods到<code>Podfile</code>文件上所允许的最新的版本。你可以使用<a href="http://guides.cocoapods.org/syntax/podfile.html#pod" target="_blank" rel="noopener">运算符</a>来指明你想要的版本。</p><h4 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h4><p><a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">Carthage</a> 采用<a href="http://www.infoq.com/presentations/Simple-Made-Easy" target="_blank" rel="noopener">简约而不简单</a>的方式将你所依赖的代码打包成二进制库文件，而不是以神奇地将它们以各种方式集成到你的项目中。这会大大的减少编译时间，因为你的依赖在项目开始构建的时候就已经被编译好了。<br>由于没有集中式的项目仓库，这意味任何可以编译成框架的代码库都支持开箱即用的<code>Carthage</code>。<br>要开始引入<code>Carthage</code>到你的项目中的话，请遵循<code>Carthage</code>文档中的<a href="https://github.com/Carthage/Carthage#installing-carthage" target="_blank" rel="noopener">说明</a>。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>为了避免将数以百计的源文件放置在同一个目录下，最好根据项目自身的架构设置一些文件夹结构层级。例如，你可以使用如下的划分方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─ Models</span><br><span class="line">├─ Views</span><br><span class="line">├─ Controllers (或者是ViewModels, 如果你的项目是MVVM架构)</span><br><span class="line">├─ Stores</span><br><span class="line">├─ Helpers</span><br></pre></td></tr></table></figure><p>首先，在 Xcode 的项目导航器中的项目名称目录下创建组(黄色的小文件夹)，然后，对于每个组，通过点击 Xcode 的文件检查器下的灰色文件夹小图标，来到分组对应的真实物理路径，并创建对应名称的文件夹，并与 Xcode 中的组相关联。</p><h4 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h4><p>项目伊始将所有的字符串都存储到本地化文件，不仅为翻译提供了便利，同时为快速查找字符串提供了便利。你可以在<code>build scheme</code>中加入启动参数来指定app的语言：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-AppleLanguages (Finnish)</span><br></pre></td></tr></table></figure><p>而对于更加复杂的翻译场景，如取决于数量的复数形式(例如: “1 person” vs “3 people”)，你应该使用<a href="https://developer.apple.com/library/prerelease/ios/documentation/MacOSX/Conceptual/BPInternational/StringsdictFileFormat/StringsdictFileFormat.html" target="_blank" rel="noopener">.stringsdict</a>格式文件而不是常规的格式化字符串文件。一旦你将视线转移到这个疯狂的语法上，你就拥有了一个知道如何为 <code>one</code>，<code>some</code>，<code>few</code> 和 <code>many</code> 应用复数化的强大工具，<a href="http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html" target="_blank" rel="noopener">例如在俄语和阿拉伯语中</a>。</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>保持常量的作用域尽可能的小，例如，当你只需要在一个类中使用常量的时候，那么这个常量作用域应仅限于这个类。需要在全局作用域保存的常量应当统一存放在一个地方。在<code>Swift</code>中，你可以使用枚举来定义常量然后生成<code>Constants.swift</code>文件来组织、存储和获取全局作用域的常量，这是一种非常干净的方式。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> baseURL = <span class="type">NSURL</span>(string: <span class="string">"http://www.example.org/"</span>)!</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> splineReticulatorName = <span class="string">"foobar"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> primaryColor = <span class="type">UIColor</span>(red: <span class="number">0.22</span>, green: <span class="number">0.58</span>, blue: <span class="number">0.29</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> secondaryColor = <span class="type">UIColor</span>.lightGray</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A visual way to define colours within code files is to use #colorLiteral</span></span><br><span class="line">    <span class="comment">// This syntax will present you with colour picker component right on the code line</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> tertiaryColor = #colorLiteral(red: <span class="number">0.22</span>, green: <span class="number">0.58</span>, blue: <span class="number">0.29</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你使用<code>Objective-C</code>时，将全局作用域常量存储在<code>Constant.h</code>文件中，该文件是被<code>Prefix Header</code>头文件所引用了的。<br>通过静态常量来代替预处理宏定义常量：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">CGFloat</span> const <span class="type">XYZBrandingFontSizeSmall</span> = <span class="number">12</span>.0f;</span><br><span class="line"><span class="keyword">static</span> <span class="type">NSString</span> * const <span class="type">XYZAwesomenessDeliveredNotificationName</span> = @<span class="string">"foo"</span>;</span><br></pre></td></tr></table></figure><p>静态常量是类型安全的，有着更加显式的作用域(在未定义之前，它们不能在所有导入/包含的文件中使用)，在后续开发中不能被重定义或者未定义，并且是在调试器中可用的。</p><h3 id="分支模型"><a href="#分支模型" class="headerlink" title="分支模型"></a>分支模型</h3><p>特别是在向公众发布应用程序时（例如通过 App Store），使用适当的标签将发布版本与其他分支隔离是一个好主意。此外，涉及大量提交的新特性开发工作应该在它自己的分支上完成。<a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener"><code>git-flow</code></a>是一个可以帮助你遵循这些约定的工具。它只是<code>Git</code>分支和标签命令的一个便捷的封装，但能帮助团队或个人维护一个适当的分支结构。<br>所有的开发都是基于<code>feature</code>分支(或针对较小的工作基于<code>Dev</code>分支)、基于app版本的标签的发布以及提交都要通过下列代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release finish &lt;version&gt;</span><br></pre></td></tr></table></figure><h3 id="最小的iOS兼容版本"><a href="#最小的iOS兼容版本" class="headerlink" title="最小的iOS兼容版本"></a>最小的iOS兼容版本</h3><p>尽早的决定你的项目所支持的最小iOS版本是十分有用的：明确需要基于哪个系统版本进行开发，测试以及哪些系统API可以使用可以帮助你评估工作量，并让你知道哪些是可用的，哪些是不安全的。</p><p>利用这些资源所收集的资料做出选择：</p><ul><li><p>官方第一手资源</p><ul><li><a href="https://developer.apple.com/support/app-store/" target="_blank" rel="noopener">苹果iOS设备占有率</a><br>版本渗透数据的主要统计渠道，如果可能的话，更倾向于本地化和特定领域的统计信息。</li></ul></li><li><p>第三方资源</p><ul><li><a href="http://iossupportmatrix.com/" target="_blank" rel="noopener">iOS Support Matrix</a> </li><li><a href="https://david-smith.org/iosversionstats/" target="_blank" rel="noopener">DavidSmith: iOS Version Stats</a></li><li><a href="https://mixpanel.com/trends/#report/ios_frag" target="_blank" rel="noopener">Mixpanel Trends: iOS versions</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS-最佳实践（一）起步&quot;&gt;&lt;a href=&quot;#iOS-最佳实践（一）起步&quot; class=&quot;headerlink&quot; title=&quot;iOS 最佳实践（一）起步&quot;&gt;&lt;/a&gt;iOS 最佳实践（一）起步&lt;/h1&gt;&lt;h2 id=&quot;为什么整理这篇文档&quot;&gt;&lt;a href=&quot;#为什么整理这篇文档&quot; class=&quot;headerlink&quot; title=&quot;为什么整理这篇文档?&quot;&gt;&lt;/a&gt;为什么整理这篇文档?&lt;/h2&gt;&lt;p&gt;刚开始从事 iOS 开发会有一点让人心生畏惧。&lt;code&gt;Swift&lt;/code&gt;和&lt;code&gt;Objective-C&lt;/code&gt;并不是被广泛使用的语言，这个平台几乎所有内容都有自己特有的名称，将你所编写的代码运行到一台设备上的过程可能是很坎坷的。这份文档就是来帮助你的，不论你是开始迈出你在&lt;code&gt;Cocoa王国&lt;/code&gt;中的第一步还是对于&lt;code&gt;以正确的方式&lt;/code&gt;编程。下面所有的内容都仅仅是建议，所以如果你有一个很好地理由用不同的方式来实现，那就去做吧!&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;如果您正在寻找特定的内容，您可以从这里直接跳到相关部分。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#1&quot;&gt;起步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;常用库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;存储&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;编码风格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;安全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;诊断&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;分发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;内购(IAP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;证书&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1&quot;&gt;起步&lt;/h2&gt;

&lt;h3&gt;人机交互指南&lt;/h3&gt;

&lt;p&gt;如果你来自其它平台，请花一些时间来熟悉苹果的&lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;人机交互指南&lt;/a&gt;。iOS 的世界非常强调要有一个良好的设计，你的app也不应例外。该指南还为设计人员提供了一个关于原生UI元素、以及如 3D Touch 或 Wallet 等 app 以及图标大小的实用概述。&lt;/p&gt;
&lt;h3 id=&quot;Xcode&quot;&gt;&lt;a href=&quot;#Xcode&quot; class=&quot;headerlink&quot; title=&quot;Xcode&quot;&gt;&lt;/a&gt;Xcode&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/xcode/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xcode&lt;/a&gt;是大多数iOS开发者所选择的IDE，同时也是苹果官方指定的唯一平台。除了&lt;code&gt;Xcode&lt;/code&gt;外，还有一些替换方案，其中&lt;a href=&quot;https://www.jetbrains.com/objc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AppCode&lt;/a&gt;可以说是最出名的了，但除非你是经验丰富的iOS开发者，否则还是请使用&lt;code&gt;Xcode&lt;/code&gt;吧。虽然它有一些缺点，但它现在确实很实用！&lt;/p&gt;
&lt;p&gt;如需安装&lt;code&gt;Xcode&lt;/code&gt;，直接在Mac的&lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;App Store&lt;/a&gt;上下载即可。它提供了最新的SDK和模拟器，您可以在首选项&amp;gt;下载中安装更多的东西。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS最佳实践" scheme="http://leejunhui.com/categories/iOS%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="iOS" scheme="http://leejunhui.com/tags/iOS/"/>
    
      <category term="翻译" scheme="http://leejunhui.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="最佳实践" scheme="http://leejunhui.com/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>拥抱变化</title>
    <link href="http://leejunhui.com/2019/08/05/%E6%8B%A5%E6%8A%B1%E5%8F%98%E5%8C%96/"/>
    <id>http://leejunhui.com/2019/08/05/拥抱变化/</id>
    <published>2019-08-05T05:30:33.000Z</published>
    <updated>2019-08-14T13:08:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天的厚度决定明天的高度，拥抱当下的变化，做时间的朋友。</p><p>近期书单:</p><ul><li>《态度》</li><li>《见识》</li><li>《浪潮之巅》</li><li>《数学之美》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天的厚度决定明天的高度，拥抱当下的变化，做时间的朋友。&lt;/p&gt;
&lt;p&gt;近期书单:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《态度》&lt;/li&gt;
&lt;li&gt;《见识》&lt;/li&gt;
&lt;li&gt;《浪潮之巅》&lt;/li&gt;
&lt;li&gt;《数学之美》&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="感悟" scheme="http://leejunhui.com/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="拥抱变化" scheme="http://leejunhui.com/tags/%E6%8B%A5%E6%8A%B1%E5%8F%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
